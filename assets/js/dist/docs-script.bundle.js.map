{"version":3,"file":"docs-script.bundle.js","mappings":"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","sources":["webpack://@cipscis/working-days/./src/WorkingDayDefinition.ts","webpack://@cipscis/working-days/./src/util/Month.ts","webpack://@cipscis/working-days/./src/util/DayOfWeek.ts","webpack://@cipscis/working-days/./src/util/DateTuple.ts","webpack://@cipscis/working-days/./src/holidays/anzacDay.ts","webpack://@cipscis/working-days/./src/holidays/easterSunday.ts","webpack://@cipscis/working-days/./src/holidays/easterMonday.ts","webpack://@cipscis/working-days/./src/holidays/goodFriday.ts","webpack://@cipscis/working-days/./src/holidays/matariki.ts","webpack://@cipscis/working-days/./src/holidays/sovereignsBirthday.ts","webpack://@cipscis/working-days/./src/holidays/waitangiDay.ts","webpack://@cipscis/working-days/./src/holidays/labourDay.ts","webpack://@cipscis/working-days/./src/holidays/queenElizabethIIMemorialDay.ts","webpack://@cipscis/working-days/./src/isWorkingDay.ts","webpack://@cipscis/working-days/./src/holidays/isWeekend.ts","webpack://@cipscis/working-days/./src/workingDaysBetween.ts","webpack://@cipscis/working-days/./src/util/Holiday.ts","webpack://@cipscis/working-days/./src/getHoliday.ts","webpack://@cipscis/working-days/./docs/assets/js/src/docs-script.ts","webpack://@cipscis/working-days/./src/addWorkingDays.ts"],"sourcesContent":["export enum WorkingDayDefinition {\r\n\t/** Official Information Act 1982 */\r\n\tOIA = 'OIA',\r\n}\r\n","/** 0-based indices of months, as used by the Date API */\nexport enum Month {\n\tJANUARY = 0,\n\tFEBRUARY = 1,\n\tMARCH = 2,\n\tAPRIL = 3,\n\tMAY = 4,\n\tJUNE = 5,\n\tJULY = 6,\n\tAUGUST = 7,\n\tSEPTEMBER = 8,\n\tOCTOBER = 9,\n\tNOVEMBER = 10,\n\tDECEMBER = 11,\n}\n","/** 0-based indices of days of the week, starting at Sunday as used by the Date API */\nexport enum DayOfWeek {\n\tMONDAY = 1,\n\tTUESDAY = 2,\n\tWEDNESDAY = 3,\n\tTHURSDAY = 4,\n\tFRIDAY = 5,\n\tSATURDAY = 6,\n\tSUNDAY = 0,\n}\n","import { Month } from './Month.js';\r\n\r\n/**\r\n * A simple tuple representing the date portion of a `Date` in the following form:\r\n * [year, month, day]\r\n */\r\nexport type DateTuple = [number, Month, number];\r\n\r\n/**\r\n * Convert a `Date` to a `DateTuple`.\r\n */\r\nexport function makeDateTuple(date: Date): DateTuple {\r\n\treturn [\r\n\t\tdate.getFullYear(),\r\n\t\tdate.getMonth(),\r\n\t\tdate.getDate(),\r\n\t];\r\n}\r\n\r\n/**\r\n * Compare two `DateTuple` objects to see if they represent the same date.\r\n */\r\nexport function compareDateTuple(dateA: DateTuple, dateB: DateTuple): boolean {\r\n\treturn dateA[0] === dateB[0] &&\r\n\t\tdateA[1] === dateB[1] &&\r\n\t\tdateA[2] === dateB[2];\r\n}\r\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\nimport {\n\tcompareDateTuple,\n\tDateTuple,\n\tmakeDateTuple,\n} from '../util/DateTuple.js';\n\n/**\n * A cache of Mondayised Anzac Day dates for quick retrieval.\n */\nconst mondayisedAnzacDays = new Map<number, DateTuple | null>();\n\n/**\n * Returns Anzac Day for a given year.\n *\n * Definition taken from [Anzac Day Act 1966 section 2](https://www.legislation.govt.nz/act/public/1966/0044/latest/whole.html#DLM379811)\n */\nexport function getAnzacDay(year: number): DateTuple {\n\t// [Anzac Day Act 1966 section 2](https://www.legislation.govt.nz/act/public/1966/0044/latest/whole.html#DLM379811)\n\t// > 25 April in each year... shall be known as Anzac Day.\n\treturn [year, Month.APRIL, 25];\n}\n\n/**\n * Returns the Monday following Anzac Day for a given year, if Anzac Day for that year falls on a Saturday or a Sunday.\n *\n * Definition taken from [Anzac Day Act 1966 section 2](https://www.legislation.govt.nz/act/public/1966/0044/latest/whole.html#DLM379811)\n */\nexport function getAnzacDayMondayised(year: number): DateTuple | null {\n\tconst cachedMondayisedAnzacDay = mondayisedAnzacDays.get(year);\n\tif (typeof cachedMondayisedAnzacDay !== 'undefined') {\n\t\treturn cachedMondayisedAnzacDay;\n\t}\n\n\tlet mondayisedAnzacDay: DateTuple | null = getAnzacDay(year);\n\tconst dayOfWeek = new Date(...mondayisedAnzacDay).getDay();\n\n\tif (dayOfWeek === DayOfWeek.SATURDAY) {\n\t\tmondayisedAnzacDay[2] += 2;\n\t} else if (dayOfWeek === DayOfWeek.SUNDAY) {\n\t\tmondayisedAnzacDay[2] += 1;\n\t} else {\n\t\tmondayisedAnzacDay = null;\n\t}\n\n\t// Cache determined Mondayised Anzac Day for later quick retrieval\n\tmondayisedAnzacDays.set(year, mondayisedAnzacDay);\n\treturn mondayisedAnzacDay;\n}\n\n/**\n * Returns if a given date is Anzac Day.\n *\n * Definition taken from [Anzac Day Act 1966 section 2](https://www.legislation.govt.nz/act/public/1966/0044/latest/whole.html#DLM379811)\n */\nexport function isAnzacDay(date: Date): boolean {\n\tconst dateTuple = makeDateTuple(date);\n\tconst [year] = dateTuple;\n\n\tconst anzacDay = getAnzacDay(year);\n\n\treturn compareDateTuple(dateTuple, anzacDay);\n}\n\n/**\n * Returns if a date is the Monday following Anzac Day, if Anzac Day for that year falls on a Saturday or a Sunday.\n *\n * Definition taken from [Anzac Day Act 1966 section 2](https://www.legislation.govt.nz/act/public/1966/0044/latest/whole.html#DLM379811)\n */\nexport function isAnzacDayMondayised(date: Date): boolean {\n\tconst anzacMonday = getAnzacDayMondayised(date.getFullYear());\n\n\tif (anzacMonday) {\n\t\treturn compareDateTuple(anzacMonday, makeDateTuple(date));\n\t} else {\n\t\t// No Mondayised Anzac day in this year\n\t\treturn false;\n\t}\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\nimport {\n\tcompareDateTuple,\n\tDateTuple,\n\tmakeDateTuple,\n} from '../util/DateTuple.js';\n\n/**\n * A table of \"Paschal Full Moon\" dates for years 1900-2199, indexed by `year % 19`\n *\n * Source: [Easter Dating Method - Astronomical Society of South Australia](https://web.archive.org/web/20220902043829/https://www.assa.org.au/edm)\n */\nconst PaschalFullMoonDates: Record<number, [Month, number]> = {\n\t0: [Month.APRIL, 14],\n\t1: [Month.APRIL, 3],\n\t2: [Month.MARCH, 23],\n\t3: [Month.APRIL, 11],\n\t4: [Month.MARCH, 31],\n\t5: [Month.APRIL, 18],\n\t6: [Month.APRIL, 8],\n\t7: [Month.MARCH, 28],\n\t8: [Month.APRIL, 16],\n\t9: [Month.APRIL, 5],\n\t10: [Month.MARCH, 25],\n\t11: [Month.APRIL, 13],\n\t12: [Month.APRIL, 2],\n\t13: [Month.MARCH, 22],\n\t14: [Month.APRIL, 10],\n\t15: [Month.MARCH, 30],\n\t16: [Month.APRIL, 17],\n\t17: [Month.APRIL, 7],\n\t18: [Month.MARCH, 27],\n};\n\n/**\n * A cache of Easter Sunday dates for quick retrieval.\n */\nconst easterSundays = new Map<number, DateTuple>();\n\n/**\n * Returns Easter Sunday for a given year.\n *\n * As far as I can find, there is no definition of when Easter Sunday occurs in New Zealand law.\n *\n * If it isn't defined, common law fills the gap, and it would likely be interpreted based on \"ordinary usage\".\n *\n * Using the Gregorian calendar, which aligns with common practice in New Zealand, Easter Sunday is calculated as falling on the Sunday following the \"Paschal Full Moon\".\n *\n * The method of calculating this date used here was taken from [Easter Dating Method - Astronomical Society of South Australia](https://web.archive.org/web/20220902043829/https://www.assa.org.au/edm)\n *\n * @throws {RangeError} This function can only calculate Easter for dates from 1900-2199.\n */\nexport function getEasterSunday(year: number): DateTuple {\n\tif (\n\t\tyear < 1900 ||\n\t\tyear > 2199\n\t) {\n\t\tthrow new RangeError(`Dates for Easter outside the years 1900-2199 have not been defined.`);\n\t}\n\n\tconst cachedEaster = easterSundays.get(year);\n\tif (cachedEaster) {\n\t\treturn cachedEaster;\n\t}\n\n\tconst yearMod = year % 19;\n\tconst pfm = PaschalFullMoonDates[yearMod];\n\n\tconst pfmDate = new Date(year, pfm[0], pfm[1]);\n\n\tconst pfmDayOfWeek = pfmDate.getDay();\n\n\t// Easter is the next Sunday after the \"Paschal Full Moon\"\n\tconst daysSinceLastSunday = DayOfWeek.SUNDAY - pfmDayOfWeek;\n\tconst daysUntilNextSunday = daysSinceLastSunday + 7;\n\n\tconst easterSundayDate = new Date(pfmDate);\n\teasterSundayDate.setDate(easterSundayDate.getDate() + daysUntilNextSunday);\n\n\tconst easterSunday = makeDateTuple(easterSundayDate);\n\n\t// Cache determined Easter date for later quick retrieval\n\teasterSundays.set(year, easterSunday);\n\treturn easterSunday;\n}\n\n/**\n * Returns if a given date is Easter Sunday.\n *\n * As far as I can find, there is no definition of when Easter Sunday occurs in New Zealand law.\n *\n * If it isn't defined, common law fills the gap, and it would likely be interpreted based on \"ordinary usage\".\n *\n * Using the Gregorian calendar, which aligns with common practice in New Zealand, Easter Sunday is calculated as falling on the Sunday following the \"Paschal Full Moon\".\n *\n * The method of calculating this date used here was taken from [Easter Dating Method - Astronomical Society of South Australia](https://web.archive.org/web/20220902043829/https://www.assa.org.au/edm)\n *\n * @throws {RangeError} This function can only calculate Easter for dates from 1900-2199.\n */\nexport function isEasterSunday(date: Date): boolean {\n\tconst year = date.getFullYear();\n\n\tif (\n\t\tyear < 1900 ||\n\t\tyear > 2199\n\t) {\n\t\tthrow new RangeError(`Dates for Easter outside the years 1900-2199 have not been defined.`);\n\t}\n\n\tconst easterSunday = getEasterSunday(year);\n\n\tconst dateTuple = makeDateTuple(date);\n\n\treturn compareDateTuple(easterSunday, dateTuple);\n}\n","import {\n\tcompareDateTuple,\n\tDateTuple,\n\tmakeDateTuple,\n} from '../util/DateTuple.js';\n\nimport { getEasterSunday } from './easterSunday.js';\n\n/**\n * A cache of Easter Monday dates for quick retrieval.\n */\nconst easterMondays = new Map<number, DateTuple>();\n\n/**\n * Returns Easter Monday for a given year.\n *\n * As far as I can find, there is no definition of when Easter Monday occurs in New Zealand law.\n *\n * If it isn't defined, common law fills the gap, and it would likely be interpreted based on \"ordinary usage\".\n *\n * Easter Monday is the Monday after Easter Sunday.\n */\nexport function getEasterMonday(year: number): DateTuple {\n\tif (\n\t\tyear < 1900 ||\n\t\tyear > 2199\n\t) {\n\t\tthrow new RangeError(`Dates for Easter outside the years 1900-2199 have not been defined.`);\n\t}\n\n\tconst cachedEaster = easterMondays.get(year);\n\tif (cachedEaster) {\n\t\treturn cachedEaster;\n\t}\n\n\tconst easterSunday = getEasterSunday(year);\n\tconst easterMonday: DateTuple = [\n\t\teasterSunday[0],\n\t\teasterSunday[1],\n\t\teasterSunday[2] + 1,\n\t];\n\n\t// Easter Sunday is always in late March or early April. If it's on March 31, we need to tick over to April.\n\tif (easterMonday[2] === 32) {\n\t\teasterMonday[1] += 1;\n\t\teasterMonday[2] = 1;\n\t}\n\n\t// Cache determined Easter date for later quick retrieval\n\teasterMondays.set(year, easterMonday);\n\n\treturn easterMonday;\n}\n\n/**\n * Returns if a given date is Easter Monday.\n *\n * As far as I can find, there is no definition of when Easter Monday occurs in New Zealand law.\n *\n * If it isn't defined, common law fills the gap, and it would likely be interpreted based on \"ordinary usage\".\n *\n * Easter Monday is the Monday after Easter Sunday.\n */\nexport function isEasterMonday(date: Date): boolean {\n\tconst year = date.getFullYear();\n\n\tif (\n\t\tyear < 1900 ||\n\t\tyear > 2199\n\t) {\n\t\tthrow new RangeError(`Dates for Easter outside the years 1900-2199 have not been defined.`);\n\t}\n\n\tconst easterMonday = getEasterMonday(year);\n\n\tconst dateTuple = makeDateTuple(date);\n\n\treturn compareDateTuple(easterMonday, dateTuple);\n}\n","import {\n\tcompareDateTuple,\n\tDateTuple,\n\tmakeDateTuple,\n} from '../util/DateTuple.js';\n\nimport { getEasterSunday } from './easterSunday.js';\n\n/**\n * A cache of Good Friday dates for quick retrieval.\n */\nconst goodFridays = new Map<number, DateTuple>();\n\n/**\n * Returns Good Friday for a given year.\n *\n * As far as I can find, there is no definition of when Good Friday occurs in New Zealand law.\n *\n * If it isn't defined, common law fills the gap, and it would likely be interpreted based on \"ordinary usage\".\n *\n * Good Friday is the Friday before Easter Sunday.\n */\nexport function getGoodFriday(year: number): DateTuple {\n\tif (\n\t\tyear < 1900 ||\n\t\tyear > 2199\n\t) {\n\t\tthrow new RangeError(`Dates for Easter outside the years 1900-2199 have not been defined.`);\n\t}\n\n\tconst cachedEaster = goodFridays.get(year);\n\tif (cachedEaster) {\n\t\treturn cachedEaster;\n\t}\n\n\tconst easterSunday = getEasterSunday(year);\n\tconst goodFriday: DateTuple = [\n\t\teasterSunday[0],\n\t\teasterSunday[1],\n\t\teasterSunday[2] - 2,\n\t];\n\n\t// Easter Sunday is always in late March or early April. If it's on April 1 or April 2, we need to tick over to March.\n\tif (goodFriday[2] <= 0) {\n\t\tgoodFriday[1] -= 1;\n\t\tgoodFriday[2] += 31;\n\t}\n\n\t// Cache determined Easter date for later quick retrieval\n\tgoodFridays.set(year, goodFriday);\n\n\treturn goodFriday;\n}\n\n/**\n * Returns if a given date is Good Friday.\n *\n * As far as I can find, there is no definition of when Good Friday occurs in New Zealand law.\n *\n * If it isn't defined, common law fills the gap, and it would likely be interpreted based on \"ordinary usage\".\n *\n * Good Friday is the Friday before Easter Sunday.\n */\nexport function isGoodFriday(date: Date): boolean {\n\tconst year = date.getFullYear();\n\n\tif (\n\t\tyear < 1900 ||\n\t\tyear > 2199\n\t) {\n\t\tthrow new RangeError(`Dates for Easter outside the years 1900-2199 have not been defined.`);\n\t}\n\n\tconst goodFriday = getGoodFriday(year);\n\n\tconst dateTuple = makeDateTuple(date);\n\n\treturn compareDateTuple(goodFriday, dateTuple);\n}\n","import { Month } from '../util/Month.js';\n\nimport {\n\tcompareDateTuple,\n\tDateTuple,\n\tmakeDateTuple,\n} from '../util/DateTuple.js';\n\n/**\n * These dates have been transcribed from [Te Kāhui o Matariki Public Holiday Act 2022 Schedule 1](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557893) on 2022-09-02\n*/\nconst matarikiDates = new Map<number, DateTuple>([\n\t[2022, [2022, Month.JUNE, 24]],\n\t[2023, [2023, Month.JULY, 14]],\n\t[2024, [2024, Month.JUNE, 28]],\n\t[2025, [2025, Month.JUNE, 20]],\n\t[2026, [2026, Month.JULY, 10]],\n\t[2027, [2027, Month.JUNE, 25]],\n\t[2028, [2028, Month.JULY, 14]],\n\t[2029, [2029, Month.JULY,  6]],\n\t[2030, [2030, Month.JUNE, 21]],\n\t[2031, [2031, Month.JULY, 11]],\n\t[2032, [2032, Month.JULY,  2]],\n\t[2033, [2033, Month.JUNE, 24]],\n\t[2034, [2034, Month.JULY,  7]],\n\t[2035, [2035, Month.JUNE, 29]],\n\t[2036, [2036, Month.JULY, 18]],\n\t[2037, [2037, Month.JULY, 10]],\n\t[2038, [2038, Month.JUNE, 25]],\n\t[2039, [2039, Month.JULY, 15]],\n\t[2040, [2040, Month.JULY,  6]],\n\t[2041, [2041, Month.JULY, 19]],\n\t[2042, [2042, Month.JULY, 11]],\n\t[2043, [2043, Month.JULY,  3]],\n\t[2044, [2044, Month.JUNE, 24]],\n\t[2045, [2045, Month.JULY,  7]],\n\t[2046, [2046, Month.JUNE, 29]],\n\t[2047, [2047, Month.JULY, 19]],\n\t[2048, [2048, Month.JULY,  3]],\n\t[2049, [2049, Month.JUNE, 25]],\n\t[2050, [2050, Month.JULY, 15]],\n\t[2051, [2051, Month.JUNE, 30]],\n\t[2052, [2052, Month.JUNE, 21]],\n]);\n\nconst years = matarikiDates.keys();\nconst lastYear = Math.max(...years);\n\n/**\n * Returns the date of Matariki for a given year.\n *\n * Definition taken from [Te Kāhui o Matariki Public Holiday Act 2022 section 5](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557846)\n *\n * @throws {RangeError} At the time of writing, dates for Matariki following 2052 have not been defined. This function will throw a `RangeError` for years after 2052.\n */\nexport function getMatariki(year: number): DateTuple | null {\n\tif (year > lastYear) {\n\t\t// [Te Kāhui o Matariki Public Holiday Act 2022 section 6](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557847)\n\t\t// > The Governor-General may, by Order in Council made on the recommendation of the Minister, make regulations adding to Schedule 1 a date in a year on which the public holiday will be observed to acknowledge Matariki in that year.\n\t\tthrow new RangeError(`The date for Matariki in the year ${year} is unknown`);\n\t}\n\n\t// [Te Kāhui o Matariki Public Holiday Act 2022 section 5](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557846)\n\t// > a public holiday is to be observed on each date specified in [Schedule 1](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557893)\n\tconst matariki = matarikiDates.get(year) ?? null;\n\treturn matariki;\n}\n\n/**\n * Returns if a given date is Matariki.\n *\n * Definition taken from [Te Kāhui o Matariki Public Holiday Act 2022 section 5](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557846)\n *\n * @throws {RangeError} At the time of writing, dates for Matariki following 2052 have not been defined. This function will throw a `RangeError` for years after 2052.\n */\nexport function isMatariki(date: Date): boolean {\n\tconst matariki = getMatariki(date.getFullYear());\n\n\tif (!matariki) {\n\t\treturn false;\n\t}\n\n\tconst dateTuple = makeDateTuple(date);\n\n\treturn compareDateTuple(matariki, dateTuple);\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\nimport {\n\tcompareDateTuple,\n\tDateTuple,\n\tmakeDateTuple,\n} from '../util/DateTuple.js';\n\n/**\n * A cache of sovereign's birthday dates for quick retrieval.\n */\nconst sovereignsBirthdays = new Map<number, DateTuple>();\n\n/**\n * Returns the sovereign's birthday for a given year.\n *\n * Definition taken from [Sovereign's Birthday Observance Act 1952 section 2](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n *\n * **Warning**: This function will no longer return a correct result once Queen Elizabeth the Second is no longer the Queen of New Zealand.\n *\n * @throws {RangeError} This function only defines the Sovereign's Birthday for 1952 and for years after 1953. A `RangeError` will be thrown if dates on non-supported years are used.\n */\nexport function getSovereignsBirthday(year: number): DateTuple | null {\n\tconst cachedSovereignsBirthday = sovereignsBirthdays.get(year);\n\tif (cachedSovereignsBirthday) {\n\t\treturn cachedSovereignsBirthday;\n\t}\n\n\tif (year < 1952) {\n\t\tthrow new RangeError(`The Sovereign's Birthday prior to the year 1952 is not defined.`);\n\t}\n\n\tif (year === 1952) {\n\t\t// [Sovereign's Birthday Observance Act 1952 section 2(a)](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n\t\t// > in respect of the year 1952, [the Sovereign's birthday shall] be deemed to be... 2 June\n\t\treturn [year, Month.JUNE, 2];\n\t}\n\n\tif (year === 1953) {\n\t\t// [Sovereign's Birthday Observance Act 1952 section 2(b)](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n\t\t// > in respect of the year 1953, [the Sovereign's birthday shall] be deemed to be... a day to be appointed in that behalf by the Governor-General by Proclamation\n\n\t\t// I haven't been able to find this proclamation, nor any information about when the Sovereign's Birthday was observed in 1953.\n\n\t\tthrow new RangeError(`The date of the Sovereign's Birthday in 1953 is unknown.`);\n\t}\n\n\tif (year > 2022) {\n\t\t// [Sovereign's Birthday Observance Act 1952 section 2(c)](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n\t\t// > in respect of every year of the reign of Her Majesty Queen Elizabeth the Second after the year 1953, [the Sovereign's birthday shall] be deemed to be... the first Monday in June.\n\n\t\t// Elizabeth II died in September 2022, so until the Sovereign's Birthday Observance Act 1952 is amended there is no defined date for the sovereign's birthday observance day in years after 2022.\n\t\treturn null;\n\t}\n\n\tconst sovereignsBirthday = new Date(year, Month.JUNE, 1);\n\n\tconst dayOfWeek = sovereignsBirthday.getDay();\n\tif (dayOfWeek !== DayOfWeek.MONDAY) {\n\t\tconst daysUntilMonday = (DayOfWeek.MONDAY + 7 - dayOfWeek) % 7;\n\t\tsovereignsBirthday.setDate(sovereignsBirthday.getDate() + daysUntilMonday);\n\t}\n\n\tconst sovereignsBirthdayTuple = makeDateTuple(sovereignsBirthday);\n\n\t// Cache determined sovereign's birthday date for later quick retrieval\n\tsovereignsBirthdays.set(year, sovereignsBirthdayTuple);\n\treturn sovereignsBirthdayTuple;\n}\n\n/**\n * Returns if a given date is the sovereign's birthday.\n *\n * Definition taken from [Sovereign's Birthday Observance Act 1952 section 2](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n *\n * **Warning**: This function will no longer return a correct result once Queen Elizabeth the Second is no longer the Queen of New Zealand.\n *\n * @throws {RangeError} This function only defines the Sovereign's Birthday for 1952 and for years after 1953. A `RangeError` will be thrown if dates on non-supported years are used.\n */\nexport function isSovereignsBirthday(date: Date): boolean {\n\tconst sovereignsBirthday = getSovereignsBirthday(date.getFullYear());\n\n\tconst dateTuple = makeDateTuple(date);\n\n\tif (sovereignsBirthday) {\n\t\treturn compareDateTuple(sovereignsBirthday, dateTuple);\n\t} else {\n\t\treturn false;\n\t}\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\nimport {\n\tcompareDateTuple,\n\tDateTuple,\n\tmakeDateTuple,\n} from '../util/DateTuple.js';\n\n/**\n * A cache of Mondayised Waitangi Day dates for quick retrieval.\n */\nconst mondayisedWaitangiDays = new Map<number, DateTuple | null>();\n\n/**\n * Returns Waitangi Day for a given year.\n *\n * Definition taken from [Waitangi Day Act 1976 section 3](https://www.legislation.govt.nz/act/public/1976/0033/latest/whole.html#DLM439055)\n */\nexport function getWaitangiDay(year: number): DateTuple {\n\t// [Waitangi Day Act 1976 section 3](https://www.legislation.govt.nz/act/public/1976/0033/latest/whole.html#DLM439055)\n\t// > 6 February in each year shall be known as Waitangi Day.\n\treturn [year, Month.FEBRUARY, 6];\n}\n\n/**\n * Returns if a given date is the Monday following Waitangi Day, if Waitangi Day for that year falls on a Saturday or a Sunday.\n *\n * Definition taken from [Waitangi Day Act 1976 section 3](https://www.legislation.govt.nz/act/public/1976/0033/latest/whole.html#DLM439055)\n */\nexport function getWaitangiDayMondayised(year: number): DateTuple | null {\n\tconst cachedMondayisedWaitangiDay = mondayisedWaitangiDays.get(year);\n\tif (typeof cachedMondayisedWaitangiDay !== 'undefined') {\n\t\treturn cachedMondayisedWaitangiDay;\n\t}\n\n\tlet mondayisedWaitangiDay: DateTuple | null = getWaitangiDay(year);\n\tconst dayOfWeek = new Date(...mondayisedWaitangiDay).getDay();\n\n\tif (dayOfWeek === DayOfWeek.SATURDAY) {\n\t\tmondayisedWaitangiDay[2] += 2;\n\t} else if (dayOfWeek === DayOfWeek.SUNDAY) {\n\t\tmondayisedWaitangiDay[2] += 1;\n\t} else {\n\t\tmondayisedWaitangiDay = null;\n\t}\n\n\t// Cache determined Mondayised Waitangi Day for later quick retrieval\n\tmondayisedWaitangiDays.set(year, mondayisedWaitangiDay);\n\treturn mondayisedWaitangiDay;\n}\n\n/**\n * Returns if a given date is Waitangi Day.\n *\n * Definition taken from [Waitangi Day Act 1976 section 3](https://www.legislation.govt.nz/act/public/1976/0033/latest/whole.html#DLM439055)\n */\nexport function isWaitangiDay(date: Date): boolean {\n\tconst waitangiDay = getWaitangiDay(date.getFullYear());\n\n\tconst dateTuple = makeDateTuple(date);\n\n\treturn compareDateTuple(waitangiDay, dateTuple);\n}\n\n/**\n * Returns if a date is the Monday following Anzac Day, if Anzac Day for that year falls on a Saturday or a Sunday.\n *\n * Definition taken from [Anzac Day Act 1966 section 2](https://www.legislation.govt.nz/act/public/1966/0044/latest/whole.html#DLM379811)\n */\nexport function isWaitangiDayMondayised(date: Date): boolean {\n\tconst waitangiMonday = getWaitangiDayMondayised(date.getFullYear());\n\n\tif (waitangiMonday) {\n\t\treturn compareDateTuple(waitangiMonday, makeDateTuple(date));\n\t} else {\n\t\t// No Mondayised Waitangi day in this year\n\t\treturn false;\n\t}\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\nimport {\n\tcompareDateTuple,\n\tDateTuple,\n\tmakeDateTuple,\n} from '../util/DateTuple.js';\n\n/**\n * A cache of Labour Day dates for quick retrieval.\n */\nconst labourDays = new Map<number, DateTuple>();\n\n/**\n * Returns Labour Day for a given year.\n *\n * Definition taken from [Holidays Act 2003 section 44(1)(j)](https://www.legislation.govt.nz/act/public/2003/0129/latest/whole.html#DLM237120)\n */\nexport function getLabourDay(year: number): DateTuple {\n\tconst cachedLabourDay = labourDays.get(year);\n\tif (cachedLabourDay) {\n\t\treturn cachedLabourDay;\n\t}\n\n\t// [Holidays Act 2003 section 44(1)(j)](https://www.legislation.govt.nz/act/public/2003/0129/latest/whole.html#DLM237120)\n\t// > Labour Day (being the fourth Monday in October)\n\tconst labourDay = new Date(year, Month.OCTOBER, 22);\n\n\tconst dayOfWeek = labourDay.getDay();\n\tif (dayOfWeek !== DayOfWeek.MONDAY) {\n\t\tconst daysUntilMonday = (DayOfWeek.MONDAY + 7 - dayOfWeek) % 7;\n\t\tlabourDay.setDate(labourDay.getDate() + daysUntilMonday);\n\t}\n\n\tconst labourDayTuple = makeDateTuple(labourDay);\n\n\t// Cache determined Labour Day date for later quick retrieval\n\tlabourDays.set(year, labourDayTuple);\n\treturn labourDayTuple;\n}\n\n/**\n * Returns if a given date is Labour Day.\n *\n * Definition taken from [Holidays Act 2003 section 44(1)(j)](https://www.legislation.govt.nz/act/public/2003/0129/latest/whole.html#DLM237120)\n */\nexport function isLabourDay(date: Date): boolean {\n\tconst labourDay = getLabourDay(date.getFullYear());\n\n\tconst dateTuple = makeDateTuple(date);\n\n\treturn compareDateTuple(labourDay, dateTuple);\n}\n","import { Month } from '../util/Month.js';\r\n\r\nimport {\r\n\tcompareDateTuple,\r\n\tDateTuple,\r\n\tmakeDateTuple,\r\n} from '../util/DateTuple.js';\r\n\r\n/**\r\n * Returns Queen Elizabeth Memorial Day for a given year.\r\n *\r\n * Definition taken from Queen Elizabeth II Memorial Day Bill following royal assent (Act not yet loaded on legislation website)\r\n */\r\nexport function getQueenElizabethIIMemorialDay(year: number): DateTuple | null {\r\n\t/*\r\n\t[Queen Elizabeth II Memorial Day Bill Section 6](https://www.legislation.govt.nz/bill/government/2022/0168/latest/whole.html#LMS757115)\r\n\r\n\t(1) In acknowledgement of the long and dedicated service of Her Majesty Queen Elizabeth II to New Zealand, 26 September 2022 is to be observed as a day of commemoration in New Zealand.\r\n\r\n\t(2) The day of commemoration is to be known as Queen Elizabeth II Memorial Day.\r\n\t*/\r\n\tif (year === 2022) {\r\n\t\treturn [2022, Month.SEPTEMBER, 26];\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns if a given date is Queen Elizabeth II Memorial Day.\r\n *\r\n * Definition taken from Queen Elizabeth II Memorial Day Bill following royal assent (Act not yet loaded on legislation website)\r\n */\r\nexport function isQueenElizabethIIMemorialDay(date: Date): boolean {\r\n\tconst dateTuple = makeDateTuple(date);\r\n\tconst [year] = dateTuple;\r\n\r\n\tconst queenElizabethIIMemorialDay = getQueenElizabethIIMemorialDay(year);\r\n\r\n\tif (queenElizabethIIMemorialDay) {\r\n\t\treturn compareDateTuple(dateTuple, queenElizabethIIMemorialDay);\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n}\r\n","import { Month } from './util/Month.js';\n\nimport { isAnzacDay, isAnzacDayMondayised } from './holidays/anzacDay.js';\nimport { isEasterMonday } from './holidays/easterMonday.js';\nimport { isGoodFriday } from './holidays/goodFriday.js';\nimport { isMatariki } from './holidays/matariki.js';\nimport { isSovereignsBirthday } from './holidays/sovereignsBirthday.js';\nimport { isWaitangiDay, isWaitangiDayMondayised } from './holidays/waitangiDay.js';\nimport { isWeekend } from './holidays/isWeekend.js';\nimport { isLabourDay } from './holidays/labourDay.js';\n\nimport { WorkingDayDefinition } from './WorkingDayDefinition.js';\nimport { isQueenElizabethIIMemorialDay } from './holidays/queenElizabethIIMemorialDay.js';\n\n/**\n * Returns if a date is a working day according to the Official Information Act 1982.\n */\nfunction isWorkingDayOia(date: Date): boolean {\n\t/* [Official Information Act 1982 section 2, definition of **working day**](https://www.legislation.govt.nz/act/public/1982/0156/latest/whole.html#DLM64790)\n\n\t**working day** means any day of the week other than—\n\t\t(a)\n\t\ta Saturday, a Sunday, Waitangi Day, Good Friday, Easter Monday, Anzac Day, the Sovereign’s birthday, Te Rā Aro ki a Matariki/Matariki Observance Day, and Labour Day; and\n\t\t(ab)\n\t\tif Waitangi Day or Anzac Day falls on a Saturday or a Sunday, the following Monday; and\n\t\t(b)\n\t\ta day in the period commencing with 25 December in any year and ending with 15 January in the following year.\n\t*/\n\n\t/* [Queen Elizabeth II Memorial Day Bill Section 8(2)](https://www.legislation.govt.nz/bill/government/2022/0168/latest/whole.html#LMS757117)\n\n\tDespite any other legislation or rule of law, Queen Elizabeth II Memorial Day is not a business or working day for the purpose of calculating the time within, by, or no sooner than which a requirement or an obligation to which subsection (1) applies must be performed.\n\t*/\n\n\t// (a)\n\tif (\n\t\tisWeekend(date) ||\n\t\tisWaitangiDay(date) ||\n\t\tisGoodFriday(date) ||\n\t\tisEasterMonday(date) ||\n\t\tisAnzacDay(date) ||\n\t\tisSovereignsBirthday(date) ||\n\t\tisMatariki(date) ||\n\t\tisLabourDay(date)\n\t) {\n\t\treturn false;\n\t}\n\n\t// (ab)\n\tif (\n\t\tisAnzacDayMondayised(date) ||\n\t\tisWaitangiDayMondayised(date)\n\t) {\n\t\treturn false;\n\t}\n\n\t// (b)\n\tif (\n\t\t(\n\t\t\tdate.getMonth() === Month.DECEMBER &&\n\t\t\tdate.getDate() >= 25\n\t\t) ||\n\t\t(\n\t\t\tdate.getMonth() === Month.JANUARY &&\n\t\t\tdate.getDate() <= 15\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\t// Queen Elizabeth II Memorial Day Bill Section 8(2)\n\tif (\n\t\tisQueenElizabethIIMemorialDay(date)\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Determines whether or not a given date qualifies as a working day, for a given definition.\n *\n * @param {Date} date - A `Date` that may or may not be a working day. Only the year, month, and day portion of the `Date` will be used.\n * @param {WorkingDayDefinition} [definition=WorkingDayDefinition.OIA] - The definition of **working day** to use in the determination. If this argument is ommitted, the definition used by the Official Information Act 1982 will be used.\n */\nexport function isWorkingDay(date: Date, definition: WorkingDayDefinition = WorkingDayDefinition.OIA): boolean {\n\tif (definition === WorkingDayDefinition.OIA) {\n\t\treturn isWorkingDayOia(date);\n\t} else {\n\t\tthrow new TypeError(`Unrecognised working day definition ${JSON.stringify(definition)}`);\n\t}\n}\n","import { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * Returns if a given date is a Saturday or a Sunday.\n */\nexport function isWeekend(date: Date): boolean {\n\tconst dayOfWeek = date.getDay();\n\n\tif (\n\t\tdayOfWeek === DayOfWeek.SATURDAY ||\n\t\tdayOfWeek === DayOfWeek.SUNDAY\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","import { WorkingDayDefinition } from './WorkingDayDefinition.js';\r\nimport { isWorkingDay } from './isWorkingDay.js';\r\n\r\n/**\r\n * Counts the number of working days between two dates, for a given definition.\r\n *\r\n * @param {Date} startDate - The first `Date` in a range to count working days between.\r\n * @param {Date} endDate - The last `Date` in a range to count working days between.\r\n * @param {WorkingDayDefinition} [definition=WorkingDayDefinition.OIA] - The definition of **working day** to use in the determination. If this argument is ommitted, the definition used by the Official Information Act 1982 will be used.\r\n */\r\nexport function workingDaysBetween(startDate: Date, endDate: Date, definition: WorkingDayDefinition = WorkingDayDefinition.OIA): number {\r\n\tif (startDate > endDate) {\r\n\t\t[startDate, endDate] = [endDate, startDate];\r\n\t}\r\n\r\n\t// Strip down to date portion only\r\n\tstartDate = new Date(\r\n\t\tstartDate.getFullYear(),\r\n\t\tstartDate.getMonth(),\r\n\t\tstartDate.getDate(),\r\n\t);\r\n\r\n\t// Strip down to date portion only\r\n\tendDate = new Date(\r\n\t\tendDate.getFullYear(),\r\n\t\tendDate.getMonth(),\r\n\t\tendDate.getDate(),\r\n\t);\r\n\r\n\tlet numWorkingDays = 0;\r\n\r\n\tconst cursor = new Date(startDate);\r\n\twhile (cursor < endDate) {\r\n\t\tcursor.setDate(cursor.getDate() + 1);\r\n\r\n\t\t// Count a new working day when it starts, not when one ends\r\n\t\tif (isWorkingDay(cursor, definition)) {\r\n\t\t\tnumWorkingDays += 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn numWorkingDays;\r\n}\r\n","export enum Holiday {\r\n\tANZAC_DAY,\r\n\tANZAC_DAY_MONDAYISED,\r\n\tWAITANGI_DAY,\r\n\tWAITANGI_DAY_MONDAYISED,\r\n\r\n\tGOOD_FRIDAY,\r\n\tEASTER_SUNDAY,\r\n\tEASTER_MONDAY,\r\n\r\n\tLABOUR_DAY,\r\n\tMATARIKI,\r\n\tSOVEREIGNS_BIRTHDAY,\r\n\r\n\tQUEEN_ELIZABETH_II_MEMORIAL_DAY,\r\n}\r\n","import { Holiday } from './util/Holiday.js';\r\n\r\nimport {\r\n\tgetAnzacDay,\r\n\tgetAnzacDayMondayised,\r\n} from './holidays/anzacDay.js';\r\nimport {\r\n\tgetWaitangiDay,\r\n\tgetWaitangiDayMondayised,\r\n} from './holidays/waitangiDay.js';\r\n\r\nimport { getGoodFriday } from './holidays/goodFriday.js';\r\nimport { getEasterSunday } from './holidays/easterSunday.js';\r\nimport { getEasterMonday } from './holidays/easterMonday.js';\r\n\r\nimport { getLabourDay } from './holidays/labourDay.js';\r\nimport { getMatariki } from './holidays/matariki.js';\r\nimport { getSovereignsBirthday } from './holidays/sovereignsBirthday.js';\r\n\r\nimport { getQueenElizabethIIMemorialDay } from './holidays/queenElizabethIIMemorialDay.js';\r\n\r\nconst holidayFunctions = {\r\n\t[Holiday.ANZAC_DAY]: getAnzacDay,\r\n\t[Holiday.ANZAC_DAY_MONDAYISED]: getAnzacDayMondayised,\r\n\t[Holiday.WAITANGI_DAY]: getWaitangiDay,\r\n\t[Holiday.WAITANGI_DAY_MONDAYISED]: getWaitangiDayMondayised,\r\n\r\n\t[Holiday.GOOD_FRIDAY]: getGoodFriday,\r\n\t[Holiday.EASTER_SUNDAY]: getEasterSunday,\r\n\t[Holiday.EASTER_MONDAY]: getEasterMonday,\r\n\r\n\t[Holiday.LABOUR_DAY]: getLabourDay,\r\n\t[Holiday.MATARIKI]: getMatariki,\r\n\t[Holiday.SOVEREIGNS_BIRTHDAY]: getSovereignsBirthday,\r\n\r\n\t[Holiday.QUEEN_ELIZABETH_II_MEMORIAL_DAY]: getQueenElizabethIIMemorialDay,\r\n} as const;\r\n\r\n/**\r\n * Returns the specified holiday for the specified year.\r\n */\r\nexport function getHoliday<T extends Holiday>(holiday: T, year: number): ReturnType<(typeof holidayFunctions)[T]> {\r\n\tconst getHolidayForYear = holidayFunctions[holiday];\r\n\r\n\t// This type assertion is necessary to stop TypeScript from collapsing the type to `DateTuple | null`,\r\n\t// and it's safe because we're just saying \"This function returns the type this function returns\"\r\n\tconst holidayDate = getHolidayForYear(year) as ReturnType<typeof getHolidayForYear>;\r\n\r\n\treturn holidayDate;\r\n}\r\n","import {\n\tisWorkingDay,\n\tworkingDaysBetween,\n\taddWorkingDays,\n\tgetHoliday,\n\tHoliday,\n} from '@cipscis/working-days';\n\nconst Selectors = Object.freeze({\n\tDATE: '#example-date',\n\tDATE_OUTPUT: '#example-date-output',\n\n\tRANGE_START: '#example-range-start',\n\tRANGE_END: '#example-range-end',\n\tRANGE_OUTPUT: '#example-range-output',\n\n\tEXTEND_START: '#example-extend-start',\n\tEXTEND_NUMBER: '#example-extend-number',\n\tEXTEND_OUTPUT: '#example-extend-output',\n\n\tGET_YEAR: '#example-get-year',\n\tGET_HOLIDAY: '#example-get-holiday',\n\tGET_OUTPUT: '#example-get-output',\n});\n\nconst validDatePattern = /^\\d{4}-\\d{2}-\\d{2}$/;\n\nconst $date = document.querySelector(Selectors.DATE);\n\nif ($date instanceof HTMLInputElement) {\n\t$date.addEventListener('input', (e) => {\n\t\tconst $output = document.querySelector(Selectors.DATE_OUTPUT);\n\n\t\tif ($output) {\n\t\t\tconst value = $date.value;\n\t\t\tif (validDatePattern.test(value)) {\n\t\t\t\tconst date = new Date(value);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst dateIsWorkingDay = isWorkingDay(date);\n\n\t\t\t\t\t$output.innerHTML = dateIsWorkingDay ? 'Working day' : 'Not a working day';\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof RangeError) {\n\t\t\t\t\t\t$output.innerHTML = `RangeError: ${e.message}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$output.innerHTML = 'An unexpected error was encountered';\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$output.innerHTML = 'Please select a valid date';\n\t\t\t}\n\t\t}\n\t});\n}\n\nconst $rangeStart = document.querySelector(Selectors.RANGE_START);\nconst $rangeEnd = document.querySelector(Selectors.RANGE_END);\n\nif ($rangeStart instanceof HTMLInputElement && $rangeEnd instanceof HTMLInputElement) {\n\tconst displayRange = function (e: Event) {\n\t\tconst $output = document.querySelector(Selectors.RANGE_OUTPUT);\n\n\t\tif ($output) {\n\t\t\tconst startValue = $rangeStart.value;\n\t\t\tconst endValue = $rangeEnd.value;\n\n\t\t\tif (validDatePattern.test(startValue) && validDatePattern.test(endValue)) {\n\t\t\t\tconst startDate = new Date(startValue);\n\t\t\t\tconst endDate = new Date(endValue);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst numWorkingDays = workingDaysBetween(startDate, endDate);\n\n\t\t\t\t\t$output.innerHTML = `${numWorkingDays} working day${numWorkingDays === 1 ? '' : 's'}`;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof RangeError) {\n\t\t\t\t\t\t$output.innerHTML = `RangeError: ${e.message}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$output.innerHTML = 'An unexpected error was encountered';\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$output.innerHTML = 'Please select a valid pair of dates';\n\t\t\t}\n\t\t}\n\t}\n\n\t$rangeStart.addEventListener('input', displayRange);\n\t$rangeEnd.addEventListener('input', displayRange);\n}\n\nconst $extendStart = document.querySelector(Selectors.EXTEND_START);\nconst $extendNumber = document.querySelector(Selectors.EXTEND_NUMBER);\n\nif ($extendStart instanceof HTMLInputElement && $extendNumber instanceof HTMLInputElement) {\n\tconst displayRange = function (e: Event) {\n\t\tconst $output = document.querySelector(Selectors.EXTEND_OUTPUT);\n\n\t\tif ($output) {\n\t\t\tconst startValue = $extendStart.value;\n\t\t\tconst numberValue = $extendNumber.value;\n\n\t\t\tif (validDatePattern.test(startValue)) {\n\t\t\t\tconst startDate = new Date(startValue);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst endDate = addWorkingDays(startDate, Number(numberValue));\n\n\t\t\t\t\t$output.innerHTML = new Intl.DateTimeFormat('en-NZ', {\n\t\t\t\t\t\tyear: 'numeric',\n\t\t\t\t\t\tmonth: 'long',\n\t\t\t\t\t\tday: 'numeric',\n\t\t\t\t\t\tweekday: 'short',\n\t\t\t\t\t}).format(endDate);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof RangeError) {\n\t\t\t\t\t\t$output.innerHTML = `RangeError: ${e.message}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$output.innerHTML = 'An unexpected error was encountered';\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$output.innerHTML = 'Please select a valid pair of dates';\n\t\t\t}\n\t\t}\n\t}\n\n\t$extendStart.addEventListener('input', displayRange);\n\t$extendNumber.addEventListener('input', displayRange);\n}\n\nconst $getYear = document.querySelector(Selectors.GET_YEAR);\nconst $getHoliday = document.querySelector(Selectors.GET_HOLIDAY);\n\nif ($getYear instanceof HTMLInputElement && $getHoliday instanceof HTMLSelectElement) {\n\tconst getHolidayEvent = function (e: Event) {\n\t\tconst $output = document.querySelector(Selectors.GET_OUTPUT);\n\n\t\tif ($output) {\n\t\t\tconst year = Number($getYear.value);\n\t\t\tconst holiday = Number($getHoliday.value) as Holiday;\n\n\t\t\ttry {\n\t\t\t\tconst holidayDate = getHoliday(holiday, year);\n\n\t\t\t\tif (holidayDate) {\n\t\t\t\t\t$output.innerHTML = new Intl.DateTimeFormat('en-NZ', {\n\t\t\t\t\t\tyear: 'numeric',\n\t\t\t\t\t\tmonth: 'long',\n\t\t\t\t\t\tday: 'numeric',\n\t\t\t\t\t\tweekday: 'short',\n\t\t\t\t\t}).format(new Date(...holidayDate));\n\t\t\t\t} else {\n\t\t\t\t\t$output.innerHTML = `The selected holiday does not occur in the year ${year}`;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof RangeError) {\n\t\t\t\t\t$output.innerHTML = `RangeError: ${e.message}`;\n\t\t\t\t} else {\n\t\t\t\t\t$output.innerHTML = 'An unexpected error was encountered';\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t$getYear.addEventListener('input', getHolidayEvent);\n\t$getHoliday.addEventListener('change', getHolidayEvent);\n}\n","import { WorkingDayDefinition } from './WorkingDayDefinition.js';\r\nimport { workingDaysBetween } from './workingDaysBetween.js';\r\n\r\n/**\r\n * Determines what the date will be after a specified number of working days from a start date, for a given definition of working day.\r\n *\r\n * @param {Date} startDate - The `Date` from which to start.\r\n * @param {number} numWorkingDays - The number of working days to count after the starting date.\r\n * @param {WorkingDayDefinition} [definition=WorkingDayDefinition.OIA] - The definition of **working day** to use in the determination. If this argument is ommitted, the definition used by the Official Information Act 1982 will be used.\r\n */\r\nexport function addWorkingDays(startDate: Date, numWorkingDays: number, definition: WorkingDayDefinition = WorkingDayDefinition.OIA): Date {\r\n\tnumWorkingDays = Math.floor(numWorkingDays);\r\n\r\n\t// Strip down to date portion only\r\n\tstartDate = new Date(\r\n\t\tstartDate.getFullYear(),\r\n\t\tstartDate.getMonth(),\r\n\t\tstartDate.getDate(),\r\n\t);\r\n\r\n\tconst endDate = new Date(startDate);\r\n\tendDate.setDate(endDate.getDate() + numWorkingDays);\r\n\tlet workingDaysRemaining = Math.abs(numWorkingDays) - workingDaysBetween(startDate, endDate, definition);\r\n\r\n\tif (numWorkingDays > 0) {\r\n\t\twhile (workingDaysBetween(startDate, endDate, definition) < numWorkingDays) {\r\n\t\t\tendDate.setDate(endDate.getDate() + workingDaysRemaining);\r\n\t\t\tworkingDaysRemaining = Math.abs(numWorkingDays) - workingDaysBetween(startDate, endDate, definition);\r\n\t\t}\r\n\t} else {\r\n\t\twhile (workingDaysBetween(startDate, endDate, definition) < -numWorkingDays) {\r\n\t\t\tendDate.setDate(endDate.getDate() - workingDaysRemaining);\r\n\t\t\tworkingDaysRemaining = Math.abs(numWorkingDays) - workingDaysBetween(startDate, endDate, definition);\r\n\t\t}\r\n\t}\r\n\r\n\treturn endDate;\r\n}\r\n"],"names":["WorkingDayDefinition","Month","DayOfWeek","date","getFullYear","getMonth","getDate","dateA","dateB","mondayisedAnzacDays","Map","getAnzacDay","year","APRIL","getAnzacDayMondayised","cachedMondayisedAnzacDay","get","mondayisedAnzacDay","dayOfWeek","Date","getDay","SATURDAY","SUNDAY","set","PaschalFullMoonDates","MARCH","easterSundays","getEasterSunday","RangeError","cachedEaster","pfm","pfmDate","pfmDayOfWeek","daysUntilNextSunday","easterSundayDate","setDate","easterSunday","easterMondays","getEasterMonday","easterMonday","goodFridays","getGoodFriday","goodFriday","matarikiDates","JUNE","JULY","years","keys","lastYear","Math","max","getMatariki","sovereignsBirthdays","getSovereignsBirthday","cachedSovereignsBirthday","sovereignsBirthday","MONDAY","daysUntilMonday","sovereignsBirthdayTuple","mondayisedWaitangiDays","getWaitangiDay","FEBRUARY","getWaitangiDayMondayised","cachedMondayisedWaitangiDay","mondayisedWaitangiDay","labourDays","getLabourDay","cachedLabourDay","labourDay","OCTOBER","labourDayTuple","getQueenElizabethIIMemorialDay","SEPTEMBER","isWorkingDay","definition","OIA","isWeekend","isWaitangiDay","isGoodFriday","isEasterMonday","dateTuple","isAnzacDay","isSovereignsBirthday","matariki","isMatariki","isLabourDay","anzacMonday","isAnzacDayMondayised","waitangiMonday","isWaitangiDayMondayised","DECEMBER","JANUARY","queenElizabethIIMemorialDay","isQueenElizabethIIMemorialDay","isWorkingDayOia","TypeError","JSON","stringify","workingDaysBetween","startDate","endDate","numWorkingDays","cursor","Holiday","holidayFunctions","ANZAC_DAY","ANZAC_DAY_MONDAYISED","WAITANGI_DAY","WAITANGI_DAY_MONDAYISED","GOOD_FRIDAY","EASTER_SUNDAY","EASTER_MONDAY","LABOUR_DAY","MATARIKI","SOVEREIGNS_BIRTHDAY","QUEEN_ELIZABETH_II_MEMORIAL_DAY","Selectors","Object","freeze","DATE","DATE_OUTPUT","RANGE_START","RANGE_END","RANGE_OUTPUT","EXTEND_START","EXTEND_NUMBER","EXTEND_OUTPUT","GET_YEAR","GET_HOLIDAY","GET_OUTPUT","validDatePattern","$date","document","querySelector","HTMLInputElement","addEventListener","e","$output","value","test","dateIsWorkingDay","innerHTML","message","$rangeStart","$rangeEnd","displayRange","startValue","endValue","$extendStart","$extendNumber","numberValue","floor","workingDaysRemaining","abs","addWorkingDays","Number","Intl","DateTimeFormat","month","day","weekday","format","$getYear","$getHoliday","HTMLSelectElement","getHolidayEvent","holiday","holidayDate","getHolidayForYear","getHoliday"],"sourceRoot":""}