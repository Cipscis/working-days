{"version":3,"file":"docs-script.bundle.js","mappings":"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","sources":["webpack://@cipscis/working-days/./src/WorkingDayDefinition.ts","webpack://@cipscis/working-days/./src/util/Month.ts","webpack://@cipscis/working-days/./src/util/DayOfWeek.ts","webpack://@cipscis/working-days/./src/holidays/isEasterSunday.ts","webpack://@cipscis/working-days/./src/holidays/isMatariki.ts","webpack://@cipscis/working-days/./src/isWorkingDay.ts","webpack://@cipscis/working-days/./src/holidays/isWeekend.ts","webpack://@cipscis/working-days/./src/holidays/isWaitangiDay.ts","webpack://@cipscis/working-days/./src/holidays/isGoodFriday.ts","webpack://@cipscis/working-days/./src/holidays/isEasterMonday.ts","webpack://@cipscis/working-days/./src/holidays/isAnzacDay.ts","webpack://@cipscis/working-days/./src/holidays/isSovereignsBirthday.ts","webpack://@cipscis/working-days/./src/holidays/isLabourDay.ts","webpack://@cipscis/working-days/./src/workingDaysBetween.ts","webpack://@cipscis/working-days/./docs/assets/js/src/docs-script.ts","webpack://@cipscis/working-days/./src/addWorkingDays.ts"],"sourcesContent":["export enum WorkingDayDefinition {\r\n\t/** Official Information Act 1982 */\r\n\tOIA = 'OIA',\r\n}\r\n","/** 0-based indices of months, as used by the Date API */\nexport enum Month {\n\tJANUARY = 0,\n\tFEBRUARY = 1,\n\tMARCH = 2,\n\tAPRIL = 3,\n\tMAY = 4,\n\tJUNE = 5,\n\tJULY = 6,\n\tAUGUST = 7,\n\tSEPTEMBER = 8,\n\tOCTOBER = 9,\n\tNOVEMBER = 10,\n\tDECEMBER = 11,\n}\n","/** 0-based indices of days of the week, starting at Sunday as used by the Date API */\nexport enum DayOfWeek {\n\tMONDAY = 1,\n\tTUESDAY = 2,\n\tWEDNESDAY = 3,\n\tTHURSDAY = 4,\n\tFRIDAY = 5,\n\tSATURDAY = 6,\n\tSUNDAY = 0,\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * A table of \"Paschal Full Moon\" dates for years 1900-2199, indexed by `year % 19`\n *\n * Source: [Easter Dating Method - Astronomical Society of South Australia](https://web.archive.org/web/20220902043829/https://www.assa.org.au/edm)\n */\nconst PaschalFullMoonDates: Record<number, [Month, number]> = {\n\t0: [Month.APRIL, 14],\n\t1: [Month.APRIL, 3],\n\t2: [Month.MARCH, 23],\n\t3: [Month.APRIL, 11],\n\t4: [Month.MARCH, 31],\n\t5: [Month.APRIL, 18],\n\t6: [Month.APRIL, 8],\n\t7: [Month.MARCH, 28],\n\t8: [Month.APRIL, 16],\n\t9: [Month.APRIL, 5],\n\t10: [Month.MARCH, 25],\n\t11: [Month.APRIL, 13],\n\t12: [Month.APRIL, 2],\n\t13: [Month.MARCH, 22],\n\t14: [Month.APRIL, 10],\n\t15: [Month.MARCH, 30],\n\t16: [Month.APRIL, 17],\n\t17: [Month.APRIL, 7],\n\t18: [Month.MARCH, 27],\n};\n\n/**\n * Returns if a given date is Easter Sunday.\n *\n * As far as I can find, there is no definition of when Easter Sunday occurs in New Zealand law.\n *\n * If it isn't defined, common law fills the gap, and it would likely be interpreted based on \"ordinary usage\".\n *\n * Using the Gregorian calendar, which aligns with common practice in New Zealand, Easter Sunday is calculated as falling on the Sunday following the \"Paschal Full Moon\".\n *\n * The method of calculating this date used here was taken from [Easter Dating Method - Astronomical Society of South Australia](https://web.archive.org/web/20220902043829/https://www.assa.org.au/edm)\n *\n * @throws {RangeError} This function can only calculate Easter for dates from 1900-2199.\n */\nexport function isEasterSunday(date: Date): boolean {\n\tconst year = date.getFullYear();\n\n\tif (\n\t\tyear < 1900 ||\n\t\tyear > 2199\n\t) {\n\t\tthrow new RangeError(`Dates for Easter outside the years 1900-2199 have not been defined.`);\n\t}\n\n\tconst month = date.getMonth();\n\n\t// Easter Sunday is always in March or April\n\tif (\n\t\tmonth !== Month.MARCH &&\n\t\tmonth !== Month.APRIL\n\t) {\n\t\treturn false;\n\t}\n\n\tconst dayOfMonth = date.getDate();\n\n\tconst yearMod = year % 19;\n\tconst pfm = PaschalFullMoonDates[yearMod];\n\n\tconst pfmDate = new Date(year, pfm[0], pfm[1]);\n\n\tconst pfmDayOfWeek = pfmDate.getDay();\n\n\t// Easter is the next Sunday after the \"Paschal Full Moon\"\n\tconst daysSinceLastSunday = DayOfWeek.SUNDAY - pfmDayOfWeek;\n\tconst daysUntilNextSunday = daysSinceLastSunday + 7;\n\n\tconst easterDate = new Date(pfmDate);\n\teasterDate.setDate(easterDate.getDate() + daysUntilNextSunday);\n\n\tconst isEaster = month === easterDate.getMonth() && dayOfMonth === easterDate.getDate();\n\n\treturn isEaster;\n}\n","import { Month } from '../util/Month.js';\n\n/**\n * These dates have been transcribed from [Te Kāhui o Matariki Public Holiday Act 2022 Schedule 1](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557893) on 2022-09-02\n*/\nconst MatarikiSchedule: Record<number, [Month, number]> = {\n\t2022: [Month.JUNE, 24],\n\t2023: [Month.JULY, 14],\n\t2024: [Month.JUNE, 28],\n\t2025: [Month.JUNE, 20],\n\t2026: [Month.JULY, 10],\n\t2027: [Month.JUNE, 25],\n\t2028: [Month.JULY, 14],\n\t2029: [Month.JULY,  6],\n\t2030: [Month.JUNE, 21],\n\t2031: [Month.JULY, 11],\n\t2032: [Month.JULY,  2],\n\t2033: [Month.JUNE, 24],\n\t2034: [Month.JULY,  7],\n\t2035: [Month.JUNE, 29],\n\t2036: [Month.JULY, 18],\n\t2037: [Month.JULY, 10],\n\t2038: [Month.JUNE, 25],\n\t2039: [Month.JULY, 15],\n\t2040: [Month.JULY,  6],\n\t2041: [Month.JULY, 19],\n\t2042: [Month.JULY, 11],\n\t2043: [Month.JULY,  3],\n\t2044: [Month.JUNE, 24],\n\t2045: [Month.JULY,  7],\n\t2046: [Month.JUNE, 29],\n\t2047: [Month.JULY, 19],\n\t2048: [Month.JULY,  3],\n\t2049: [Month.JUNE, 25],\n\t2050: [Month.JULY, 15],\n\t2051: [Month.JUNE, 30],\n\t2052: [Month.JUNE, 21],\n};\n\n/**\n * Returns if a given date is Matariki.\n *\n * Definition taken from [Te Kāhui o Matariki Public Holiday Act 2022 section 5](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557846)\n *\n * @throws {RangeError} At the time of writing, dates for Matariki following 2052 have not been defined. This function will throw a `RangeError` for years after 2052.\n */\nexport function isMatariki(date: Date): boolean {\n\t// [Te Kāhui o Matariki Public Holiday Act 2022 section 5](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557846)\n\t// > a public holiday is to be observed on each date specified in [Schedule 1](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557893)\n\n\tconst year = date.getFullYear();\n\tconst month = date.getMonth();\n\tconst dayOfMonth = date.getDate();\n\n\tconst firstYear = 2022;\n\n\tif (year < firstYear) {\n\t\treturn false;\n\t} else if (MatarikiSchedule[year]) {\n\t\tconst [matarikiMonth, matarikiDate] = MatarikiSchedule[year];\n\n\t\tif (\n\t\t\tmatarikiMonth === month &&\n\t\t\tmatarikiDate === dayOfMonth\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\t// [Te Kāhui o Matariki Public Holiday Act 2022 section 6](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557847)\n\t\t// > The Governor-General may, by Order in Council made on the recommendation of the Minister, make regulations adding to Schedule 1 a date in a year on which the public holiday will be observed to acknowledge Matariki in that year.\n\t\tthrow new RangeError(`The date for Matariki in the year ${year} is unknown`);\n\t}\n\n\treturn false;\n}\n","import { Month } from './util/Month.js';\n\nimport { isAnzacDay, isMondayAfterAnzacDay } from './holidays/isAnzacDay.js';\nimport { isEasterMonday } from './holidays/isEasterMonday.js';\nimport { isGoodFriday } from './holidays/isGoodFriday.js';\nimport { isMatariki } from './holidays/isMatariki.js';\nimport { isSovereignsBirthday } from './holidays/isSovereignsBirthday.js';\nimport { isMondayAfterWaitangiDay, isWaitangiDay } from './holidays/isWaitangiDay.js';\nimport { isWeekend } from './holidays/isWeekend.js';\nimport { isLabourDay } from './holidays/isLabourDay.js';\n\nimport { WorkingDayDefinition } from './WorkingDayDefinition.js';\n\n/**\n * Returns if a date is a working day according to the Official Information Act 1982.\n */\nfunction isWorkingDayOia(date: Date): boolean {\n\t/* [Official Information Act 1982 section 2, definition of **working day**](https://www.legislation.govt.nz/act/public/1982/0156/latest/whole.html#DLM64790)\n\n\t**working day** means any day of the week other than—\n\t\t(a)\n\t\ta Saturday, a Sunday, Waitangi Day, Good Friday, Easter Monday, Anzac Day, the Sovereign’s birthday, Te Rā Aro ki a Matariki/Matariki Observance Day, and Labour Day; and\n\t\t(ab)\n\t\tif Waitangi Day or Anzac Day falls on a Saturday or a Sunday, the following Monday; and\n\t\t(b)\n\t\ta day in the period commencing with 25 December in any year and ending with 15 January in the following year.\n\t*/\n\n\t// (a)\n\tif (\n\t\tisWeekend(date) ||\n\t\tisWaitangiDay(date) ||\n\t\tisGoodFriday(date) ||\n\t\tisEasterMonday(date) ||\n\t\tisAnzacDay(date) ||\n\t\tisSovereignsBirthday(date) ||\n\t\tisMatariki(date) ||\n\t\tisLabourDay(date)\n\t) {\n\t\treturn false;\n\t}\n\n\t// (ab)\n\tif (\n\t\tisMondayAfterAnzacDay(date) ||\n\t\tisMondayAfterWaitangiDay(date)\n\t) {\n\t\treturn false;\n\t}\n\n\t// (b)\n\tif (\n\t\t(\n\t\t\tdate.getMonth() === Month.DECEMBER &&\n\t\t\tdate.getDate() >= 25\n\t\t) ||\n\t\t(\n\t\t\tdate.getMonth() === Month.JANUARY &&\n\t\t\tdate.getDate() <= 15\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Determines whether or not a given date qualifies as a working day, for a given definition.\n *\n * @param {Date} date - A `Date` that may or may not be a working day. Only the year, month, and day portion of the `Date` will be used.\n * @param {WorkingDayDefinition} [definition=WorkingDayDefinition.OIA] - The definition of **working day** to use in the determination. If this argument is ommitted, the definition used by the Official Information Act 1982 will be used.\n */\nexport function isWorkingDay(date: Date, definition: WorkingDayDefinition = WorkingDayDefinition.OIA): boolean {\n\tif (definition === WorkingDayDefinition.OIA) {\n\t\treturn isWorkingDayOia(date);\n\t} else {\n\t\tthrow new TypeError(`Unrecognised working day definition ${JSON.stringify(definition)}`);\n\t}\n}\n","import { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * Returns if a given date is a Saturday or a Sunday.\n */\nexport function isWeekend(date: Date): boolean {\n\tconst dayOfWeek = date.getDay();\n\n\tif (\n\t\tdayOfWeek === DayOfWeek.SATURDAY ||\n\t\tdayOfWeek === DayOfWeek.SUNDAY\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * Returns if a given date is Waitangi Day.\n *\n * Definition taken from [Waitangi Day Act 1976 section 3](https://www.legislation.govt.nz/act/public/1976/0033/latest/whole.html#DLM439055)\n */\nexport function isWaitangiDay(date: Date): boolean {\n\tconst month = date.getMonth();\n\tif (month === Month.FEBRUARY) {\n\t\tconst dayOfMonth = date.getDate();\n\n\t\tif (dayOfMonth === 6) {\n\t\t\t// [Waitangi Day Act 1976 section 3](https://www.legislation.govt.nz/act/public/1976/0033/latest/whole.html#DLM439055)\n\t\t\t// > 6 February in each year shall be known as Waitangi Day.\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns if a given date is the Monday following Waitangi Day, if Waitangi Day for that year falls on a Saturday or a Sunday.\n */\nexport function isMondayAfterWaitangiDay(date: Date): boolean {\n\tconst month = date.getMonth();\n\tif (month === Month.FEBRUARY) {\n\t\tconst dayOfMonth = date.getDate();\n\t\tconst dayOfWeek = date.getDay();\n\n\t\tif (\n\t\t\t(dayOfWeek === DayOfWeek.MONDAY) &&\n\t\t\t(dayOfMonth === 7 || dayOfMonth === 8)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { DayOfWeek } from '../util/DayOfWeek.js';\n\nimport { isEasterSunday } from './isEasterSunday.js';\n\n/**\n * Returns if a given date is Good Friday.\n *\n * As far as I can find, there is no definition of when Good Friday occurs in New Zealand law.\n *\n * If it isn't defined, common law fills the gap, and it would likely be interpreted based on \"ordinary usage\".\n *\n * Good Friday is the Friday before Easter Sunday.\n */\nexport function isGoodFriday(date: Date): boolean {\n\tconst dayOfWeek = date.getDay();\n\tif (dayOfWeek === DayOfWeek.FRIDAY) {\n\t\tconst nextSunday = new Date(\n\t\t\tdate.getFullYear(),\n\t\t\tdate.getMonth(),\n\t\t\tdate.getDate() + 2,\n\t\t);\n\n\t\tif (isEasterSunday(nextSunday)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { DayOfWeek } from '../util/DayOfWeek.js';\n\nimport { isEasterSunday } from './isEasterSunday.js';\n\n/**\n * Returns if a given date is Easter Monday.\n *\n * As far as I can find, there is no definition of when Easter Monday occurs in New Zealand law.\n *\n * If it isn't defined, common law fills the gap, and it would likely be interpreted based on \"ordinary usage\".\n *\n * Easter Monday is the Monday after Easter Sunday.\n */\nexport function isEasterMonday(date: Date): boolean {\n\tconst dayOfWeek = date.getDay();\n\tif (dayOfWeek === DayOfWeek.MONDAY) {\n\t\tconst lastSunday = new Date(\n\t\t\tdate.getFullYear(),\n\t\t\tdate.getMonth(),\n\t\t\tdate.getDate() - 1\n\t\t);\n\n\t\tif (isEasterSunday(lastSunday)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * Returns if a given date is Anzac Day.\n *\n * Definition taken from [Anzac Day Act 1966 section 2](https://www.legislation.govt.nz/act/public/1966/0044/latest/whole.html#DLM379811)\n */\nexport function isAnzacDay(date: Date): boolean {\n\tconst month = date.getMonth();\n\tif (month === Month.APRIL) {\n\t\tconst dayOfMonth = date.getDate();\n\n\t\tif (dayOfMonth === 25) {\n\t\t\t// [Anzac Day Act 1966 section 2](https://www.legislation.govt.nz/act/public/1966/0044/latest/whole.html#DLM379811)\n\t\t\t// > 25 April in each year... shall be known as Anzac Day.\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns if a date is the Monday following Anzac Day, if Anzac Day for that year falls on a Saturday or a Sunday.\n */\nexport function isMondayAfterAnzacDay(date: Date): boolean {\n\tconst month = date.getMonth();\n\tif (month === Month.APRIL) {\n\t\tconst dayOfMonth = date.getDate();\n\t\tconst dayOfWeek = date.getDay();\n\n\t\tif (\n\t\t\t(dayOfWeek === DayOfWeek.MONDAY) &&\n\t\t\t(dayOfMonth === 26 || dayOfMonth === 27)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * Returns if a given date is the sovereign's birthday.\n *\n * Definition taken from [Sovereign's Birthday Observance Act 1952 section 2](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n *\n * **Warning**: This function will no longer return a correct result once Queen Elizabeth the Second is no longer the Queen of New Zealand.\n *\n * @throws {RangeError} This function only defines the Sovereign's Birthday for 1952 and for years after 1953. A `RangeError` will be thrown if dates on non-supported years are used.\n */\nexport function isSovereignsBirthday(date: Date): boolean {\n\tconst year = date.getFullYear();\n\tconst month = date.getMonth();\n\n\tif (year < 1952) {\n\t\tthrow new RangeError(`The Sovereign's Birthday prior to the year 1952 is not defined.`);\n\t}\n\n\tif (year === 1952) {\n\t\t// [Sovereign's Birthday Observance Act 1952 section 2(a)](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n\t\t// > in respect of the year 1952, [the Sovereign's birthday shall] be deemed to be... 2 June\n\t\tif (\n\t\t\tmonth === Month.JUNE &&\n\t\t\tdate.getDate() === 2\n\t\t) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (year === 1953) {\n\t\t// [Sovereign's Birthday Observance Act 1952 section 2(b)](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n\t\t// > in respect of the year 1953, [the Sovereign's birthday shall] be deemed to be... a day to be appointed in that behalf by the Governor-General by Proclamation\n\n\t\t// I haven't been able to find this proclamation, nor any information about when the Sovereign's Birthday was observed in 1953.\n\n\t\tthrow new RangeError(`The date of the Sovereign's Birthday in 1953 is unknown.`);\n\t}\n\n\tif (month === Month.JUNE) {\n\t\tconst dayOfMonth = date.getDate();\n\t\tconst dayOfWeek = date.getDay();\n\n\t\t// [Sovereign's Birthday Observance Act 1952 section 2(c)](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n\t\t// > in respect of every year of the reign of Her Majesty Queen Elizabeth the Second after the year 1953, [the Sovereign's birthday shall] be deemed to be... the first Monday in June.\n\t\tif (\n\t\t\tdayOfWeek === DayOfWeek.MONDAY &&\n\t\t\tdayOfMonth <= 7\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * Returns if a given date is Labour Day.\n *\n * Definition taken from [Holidays Act 2003 section 44(1)(j)](https://www.legislation.govt.nz/act/public/2003/0129/latest/whole.html#DLM237120)\n */\nexport function isLabourDay(date: Date): boolean {\n\tconst month = date.getMonth();\n\tif (month === Month.OCTOBER) {\n\t\tconst dayOfMonth = date.getDate();\n\t\tconst dayOfWeek = date.getDay();\n\n\t\tif (\n\t\t\tdayOfWeek === DayOfWeek.MONDAY &&\n\t\t\tdayOfMonth >= 22 &&\n\t\t\tdayOfMonth < 29\n\t\t) {\n\t\t\t// [Holidays Act 2003 section 44(1)(j)](https://www.legislation.govt.nz/act/public/2003/0129/latest/whole.html#DLM237120)\n\t\t\t// > Labour Day (being the fourth Monday in October)\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { WorkingDayDefinition } from './WorkingDayDefinition.js';\r\nimport { isWorkingDay } from './isWorkingDay.js';\r\n\r\n/**\r\n * Counts the number of working days between two dates, for a given definition.\r\n *\r\n * @param {Date} startDate - The first `Date` in a range to count working days between.\r\n * @param {Date} endDate - The last `Date` in a range to count working days between.\r\n * @param {WorkingDayDefinition} [definition=WorkingDayDefinition.OIA] - The definition of **working day** to use in the determination. If this argument is ommitted, the definition used by the Official Information Act 1982 will be used.\r\n */\r\nexport function workingDaysBetween(startDate: Date, endDate: Date, definition: WorkingDayDefinition = WorkingDayDefinition.OIA): number {\r\n\tif (startDate > endDate) {\r\n\t\t[startDate, endDate] = [endDate, startDate];\r\n\t}\r\n\r\n\t// Strip down to date portion only\r\n\tstartDate = new Date(\r\n\t\tstartDate.getFullYear(),\r\n\t\tstartDate.getMonth(),\r\n\t\tstartDate.getDate(),\r\n\t);\r\n\r\n\t// Strip down to date portion only\r\n\tendDate = new Date(\r\n\t\tendDate.getFullYear(),\r\n\t\tendDate.getMonth(),\r\n\t\tendDate.getDate(),\r\n\t);\r\n\r\n\tlet numWorkingDays = 0;\r\n\r\n\tconst cursor = new Date(startDate);\r\n\twhile (cursor < endDate) {\r\n\t\tcursor.setDate(cursor.getDate() + 1);\r\n\r\n\t\t// Count a new working day when it starts, not when one ends\r\n\t\tif (isWorkingDay(cursor, definition)) {\r\n\t\t\tnumWorkingDays += 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn numWorkingDays;\r\n}\r\n","import {\n\tisWorkingDay,\n\tworkingDaysBetween,\n\taddWorkingDays,\n} from '@cipscis/working-days';\n\nconst Selectors = Object.freeze({\n\tDATE: '#example-date',\n\tDATE_OUTPUT: '#example-date-output',\n\n\tRANGE_START: '#example-range-start',\n\tRANGE_END: '#example-range-end',\n\tRANGE_OUTPUT: '#example-range-output',\n\n\tEXTEND_START: '#example-extend-start',\n\tEXTEND_NUMBER: '#example-extend-number',\n\tEXTEND_OUTPUT: '#example-extend-output',\n});\n\nconst validDatePattern = /^\\d{4}-\\d{2}-\\d{2}$/;\n\nconst $date = document.querySelector(Selectors.DATE);\n\nif ($date instanceof HTMLInputElement) {\n\t$date.addEventListener('input', (e) => {\n\t\tconst $output = document.querySelector(Selectors.DATE_OUTPUT);\n\n\t\tif ($output) {\n\t\t\tconst value = $date.value;\n\t\t\tif (validDatePattern.test(value)) {\n\t\t\t\tconst date = new Date(value);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst dateIsWorkingDay = isWorkingDay(date);\n\n\t\t\t\t\t$output.innerHTML = dateIsWorkingDay ? 'Working day' : 'Not a working day';\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof RangeError) {\n\t\t\t\t\t\t$output.innerHTML = `RangeError: ${e.message}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$output.innerHTML = 'An unexpected error was encountered';\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$output.innerHTML = 'Please select a valid date';\n\t\t\t}\n\t\t}\n\t});\n}\n\nconst $rangeStart = document.querySelector(Selectors.RANGE_START);\nconst $rangeEnd = document.querySelector(Selectors.RANGE_END);\n\nif ($rangeStart instanceof HTMLInputElement && $rangeEnd instanceof HTMLInputElement) {\n\tconst displayRange = function (e: Event) {\n\t\tconst $output = document.querySelector(Selectors.RANGE_OUTPUT);\n\n\t\tif ($output) {\n\t\t\tconst startValue = $rangeStart.value;\n\t\t\tconst endValue = $rangeEnd.value;\n\n\t\t\tif (validDatePattern.test(startValue) && validDatePattern.test(endValue)) {\n\t\t\t\tconst startDate = new Date(startValue);\n\t\t\t\tconst endDate = new Date(endValue);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst numWorkingDays = workingDaysBetween(startDate, endDate);\n\n\t\t\t\t\t$output.innerHTML = `${numWorkingDays} working day${numWorkingDays === 1 ? '' : 's'}`;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof RangeError) {\n\t\t\t\t\t\t$output.innerHTML = `RangeError: ${e.message}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$output.innerHTML = 'An unexpected error was encountered';\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$output.innerHTML = 'Please select a valid pair of dates';\n\t\t\t}\n\t\t}\n\t}\n\n\t$rangeStart.addEventListener('input', displayRange);\n\t$rangeEnd.addEventListener('input', displayRange);\n}\n\nconst $extendStart = document.querySelector(Selectors.EXTEND_START);\nconst $extendNumber = document.querySelector(Selectors.EXTEND_NUMBER);\n\nif ($extendStart instanceof HTMLInputElement && $extendNumber instanceof HTMLInputElement) {\n\tconst displayRange = function (e: Event) {\n\t\tconst $output = document.querySelector(Selectors.EXTEND_OUTPUT);\n\n\t\tif ($output) {\n\t\t\tconst startValue = $extendStart.value;\n\t\t\tconst numberValue = $extendNumber.value;\n\n\t\t\tif (validDatePattern.test(startValue)) {\n\t\t\t\tconst startDate = new Date(startValue);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst endDate = addWorkingDays(startDate, Number(numberValue));\n\n\t\t\t\t\t$output.innerHTML = new Intl.DateTimeFormat('en-NZ', {\n\t\t\t\t\t\tyear: 'numeric',\n\t\t\t\t\t\tmonth: 'long',\n\t\t\t\t\t\tday: 'numeric',\n\t\t\t\t\t}).format(endDate);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof RangeError) {\n\t\t\t\t\t\t$output.innerHTML = `RangeError: ${e.message}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$output.innerHTML = 'An unexpected error was encountered';\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$output.innerHTML = 'Please select a valid pair of dates';\n\t\t\t}\n\t\t}\n\t}\n\n\t$extendStart.addEventListener('input', displayRange);\n\t$extendNumber.addEventListener('input', displayRange);\n}\n","import { WorkingDayDefinition } from './WorkingDayDefinition.js';\r\nimport { workingDaysBetween } from './workingDaysBetween.js';\r\n\r\n/**\r\n * Determines what the date will be after a specified number of working days from a start date, for a given definition of working day.\r\n *\r\n * @param {Date} startDate - The `Date` from which to start.\r\n * @param {number} numWorkingDays - The number of working days to count after the starting date.\r\n * @param {WorkingDayDefinition} [definition=WorkingDayDefinition.OIA] - The definition of **working day** to use in the determination. If this argument is ommitted, the definition used by the Official Information Act 1982 will be used.\r\n */\r\nexport function addWorkingDays(startDate: Date, numWorkingDays: number, definition: WorkingDayDefinition = WorkingDayDefinition.OIA): Date {\r\n\tnumWorkingDays = Math.floor(numWorkingDays);\r\n\r\n\t// Strip down to date portion only\r\n\tstartDate = new Date(\r\n\t\tstartDate.getFullYear(),\r\n\t\tstartDate.getMonth(),\r\n\t\tstartDate.getDate(),\r\n\t);\r\n\r\n\tconst endDate = new Date(startDate);\r\n\tendDate.setDate(endDate.getDate() + numWorkingDays);\r\n\tlet workingDaysRemaining = Math.abs(numWorkingDays) - workingDaysBetween(startDate, endDate, definition);\r\n\r\n\tif (numWorkingDays > 0) {\r\n\t\twhile (workingDaysBetween(startDate, endDate, definition) < numWorkingDays) {\r\n\t\t\tendDate.setDate(endDate.getDate() + workingDaysRemaining);\r\n\t\t\tworkingDaysRemaining = Math.abs(numWorkingDays) - workingDaysBetween(startDate, endDate, definition);\r\n\t\t}\r\n\t} else {\r\n\t\twhile (workingDaysBetween(startDate, endDate, definition) < -numWorkingDays) {\r\n\t\t\tendDate.setDate(endDate.getDate() - workingDaysRemaining);\r\n\t\t\tworkingDaysRemaining = Math.abs(numWorkingDays) - workingDaysBetween(startDate, endDate, definition);\r\n\t\t}\r\n\t}\r\n\r\n\treturn endDate;\r\n}\r\n"],"names":["WorkingDayDefinition","Month","DayOfWeek","PaschalFullMoonDates","APRIL","MARCH","isEasterSunday","date","year","getFullYear","RangeError","month","getMonth","dayOfMonth","getDate","pfm","pfmDate","Date","pfmDayOfWeek","getDay","daysUntilNextSunday","SUNDAY","easterDate","setDate","MatarikiSchedule","JUNE","JULY","isWorkingDay","definition","OIA","dayOfWeek","SATURDAY","isWeekend","FEBRUARY","isWaitangiDay","FRIDAY","isGoodFriday","MONDAY","isEasterMonday","isAnzacDay","isSovereignsBirthday","matarikiMonth","matarikiDate","isMatariki","OCTOBER","isLabourDay","isMondayAfterAnzacDay","isMondayAfterWaitangiDay","DECEMBER","JANUARY","isWorkingDayOia","TypeError","JSON","stringify","workingDaysBetween","startDate","endDate","numWorkingDays","cursor","Selectors","Object","freeze","DATE","DATE_OUTPUT","RANGE_START","RANGE_END","RANGE_OUTPUT","EXTEND_START","EXTEND_NUMBER","EXTEND_OUTPUT","validDatePattern","$date","document","querySelector","HTMLInputElement","addEventListener","e","$output","value","test","dateIsWorkingDay","innerHTML","message","$rangeStart","$rangeEnd","displayRange","startValue","endValue","$extendStart","$extendNumber","numberValue","Math","floor","workingDaysRemaining","abs","addWorkingDays","Number","Intl","DateTimeFormat","day","format"],"sourceRoot":""}