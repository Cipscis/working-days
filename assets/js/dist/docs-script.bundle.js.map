{"version":3,"file":"docs-script.bundle.js","mappings":"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","sources":["webpack://@cipscis/working-days/./src/util/Month.ts","webpack://@cipscis/working-days/./src/util/DayOfWeek.ts","webpack://@cipscis/working-days/./src/holidays/isEasterSunday.ts","webpack://@cipscis/working-days/./src/holidays/isMatariki.ts","webpack://@cipscis/working-days/./src/isWorkingDay.ts","webpack://@cipscis/working-days/./docs/assets/js/src/docs-script.ts","webpack://@cipscis/working-days/./src/holidays/isWeekend.ts","webpack://@cipscis/working-days/./src/holidays/isWaitangiDay.ts","webpack://@cipscis/working-days/./src/holidays/isGoodFriday.ts","webpack://@cipscis/working-days/./src/holidays/isEasterMonday.ts","webpack://@cipscis/working-days/./src/holidays/isAnzacDay.ts","webpack://@cipscis/working-days/./src/holidays/isSovereignsBirthday.ts","webpack://@cipscis/working-days/./src/holidays/isLabourDay.ts"],"sourcesContent":["/** 0-based indices of months, as used by the Date API */\nexport enum Month {\n\tJANUARY = 0,\n\tFEBRUARY = 1,\n\tMARCH = 2,\n\tAPRIL = 3,\n\tMAY = 4,\n\tJUNE = 5,\n\tJULY = 6,\n\tAUGUST = 7,\n\tSEPTEMBER = 8,\n\tOCTOBER = 9,\n\tNOVEMBER = 10,\n\tDECEMBER = 11,\n}\n","/** 0-based indices of days of the week, starting at Sunday as used by the Date API */\nexport enum DayOfWeek {\n\tMONDAY = 1,\n\tTUESDAY = 2,\n\tWEDNESDAY = 3,\n\tTHURSDAY = 4,\n\tFRIDAY = 5,\n\tSATURDAY = 6,\n\tSUNDAY = 0,\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * A table of \"Paschal Full Moon\" dates for years 1900-2199, indexed by `year % 19`\n *\n * Source: [Easter Dating Method - Astronomical Society of South Australia](https://web.archive.org/web/20220902043829/https://www.assa.org.au/edm)\n */\nconst PaschalFullMoonDates: Record<number, [Month, number]> = {\n\t0: [Month.APRIL, 14],\n\t1: [Month.APRIL, 3],\n\t2: [Month.MARCH, 23],\n\t3: [Month.APRIL, 11],\n\t4: [Month.MARCH, 31],\n\t5: [Month.APRIL, 18],\n\t6: [Month.APRIL, 8],\n\t7: [Month.MARCH, 28],\n\t8: [Month.APRIL, 16],\n\t9: [Month.APRIL, 5],\n\t10: [Month.MARCH, 25],\n\t11: [Month.APRIL, 13],\n\t12: [Month.APRIL, 2],\n\t13: [Month.MARCH, 22],\n\t14: [Month.APRIL, 10],\n\t15: [Month.MARCH, 30],\n\t16: [Month.APRIL, 17],\n\t17: [Month.APRIL, 7],\n\t18: [Month.MARCH, 27],\n};\n\n/**\n * Returns if a given date is Easter Sunday.\n *\n * **Warning**: This function's results are only correct for dates from 1900-2199.\n *\n * As far as I can find, there is no definition of when Easter Sunday occurs in New Zealand law.\n *\n * If it isn't defined, common law fills the gap, and it would likely be interpreted based on \"ordinary usage\".\n *\n * Using the Gregorian calendar, which aligns with common practice in New Zealand, Easter Sunday is calculated as falling on the Sunday following the \"Paschal Full Moon\".\n *\n * The method of calculating this date used here was taken from [Easter Dating Method - Astronomical Society of South Australia](https://web.archive.org/web/20220902043829/https://www.assa.org.au/edm)\n */\nexport function isEasterSunday(date: Date): boolean {\n\tconst month = date.getMonth();\n\n\t// Easter Sunday is always in March or April\n\tif (\n\t\tmonth !== Month.MARCH &&\n\t\tmonth !== Month.APRIL\n\t) {\n\t\treturn false;\n\t}\n\n\tconst year = date.getFullYear();\n\tconst dayOfMonth = date.getDate();\n\n\tconst yearMod = year % 19;\n\tconst pfm = PaschalFullMoonDates[yearMod];\n\n\tconst pfmDate = new Date(year, pfm[0], pfm[1]);\n\n\tconst pfmDayOfWeek = pfmDate.getDay();\n\n\t// Easter is the next Sunday after the \"Paschal Full Moon\"\n\tconst daysSinceLastSunday = DayOfWeek.SUNDAY - pfmDayOfWeek;\n\tconst daysUntilNextSunday = daysSinceLastSunday + 7;\n\n\tconst easterDate = new Date(pfmDate);\n\teasterDate.setDate(easterDate.getDate() + daysUntilNextSunday);\n\n\tconst isEaster = month === easterDate.getMonth() && dayOfMonth === easterDate.getDate();\n\n\treturn isEaster;\n}\n","import { Month } from '../util/Month.js';\n\n/**\n * These dates have been transcribed from [Te Kāhui o Matariki Public Holiday Act 2022 Schedule 1](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557893) on 2022-09-02\n*/\nconst MatarikiSchedule: Record<number, [Month, number]> = {\n\t2022: [Month.JUNE, 24],\n\t2023: [Month.JULY, 14],\n\t2024: [Month.JUNE, 28],\n\t2025: [Month.JUNE, 20],\n\t2026: [Month.JULY, 10],\n\t2027: [Month.JUNE, 25],\n\t2028: [Month.JULY, 14],\n\t2029: [Month.JULY,  6],\n\t2030: [Month.JUNE, 21],\n\t2031: [Month.JULY, 11],\n\t2032: [Month.JULY,  2],\n\t2033: [Month.JUNE, 24],\n\t2034: [Month.JULY,  7],\n\t2035: [Month.JUNE, 29],\n\t2036: [Month.JULY, 18],\n\t2037: [Month.JULY, 10],\n\t2038: [Month.JUNE, 25],\n\t2039: [Month.JULY, 15],\n\t2040: [Month.JULY,  6],\n\t2041: [Month.JULY, 19],\n\t2042: [Month.JULY, 11],\n\t2043: [Month.JULY,  3],\n\t2044: [Month.JUNE, 24],\n\t2045: [Month.JULY,  7],\n\t2046: [Month.JUNE, 29],\n\t2047: [Month.JULY, 19],\n\t2048: [Month.JULY,  3],\n\t2049: [Month.JUNE, 25],\n\t2050: [Month.JULY, 15],\n\t2051: [Month.JUNE, 30],\n\t2052: [Month.JUNE, 21],\n};\n\n/**\n * Returns if a given date is Matariki.\n *\n * Definition taken from [Te Kāhui o Matariki Public Holiday Act 2022 section 5](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557846)\n *\n * @throws {RangeError} At the time of writing, dates for Matariki following 2052 have not been defined. This function will throw a `RangeError` for years after 2052.\n */\nexport function isMatariki(date: Date): boolean {\n\t// [Te Kāhui o Matariki Public Holiday Act 2022 section 5](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557846)\n\t// > a public holiday is to be observed on each date specified in [Schedule 1](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557893)\n\n\tconst year = date.getFullYear();\n\tconst month = date.getMonth();\n\tconst dayOfMonth = date.getDate();\n\n\tconst firstYear = 2022;\n\n\tif (year < firstYear) {\n\t\treturn false;\n\t} else if (MatarikiSchedule[year]) {\n\t\tconst [matarikiMonth, matarikiDate] = MatarikiSchedule[year];\n\n\t\tif (\n\t\t\tmatarikiMonth === month &&\n\t\t\tmatarikiDate === dayOfMonth\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\t// [Te Kāhui o Matariki Public Holiday Act 2022 section 6](https://www.legislation.govt.nz/act/public/2022/0014/latest/whole.html#LMS557847)\n\t\t// > The Governor-General may, by Order in Council made on the recommendation of the Minister, make regulations adding to Schedule 1 a date in a year on which the public holiday will be observed to acknowledge Matariki in that year.\n\t\tthrow new RangeError(`The date for Matariki in the year ${year} is unknown`);\n\t}\n\n\treturn false;\n}\n","import { Month } from './util/Month.js';\n\nimport { isAnzacDay, isMondayAfterAnzacDay } from './holidays/isAnzacDay.js';\nimport { isEasterMonday } from './holidays/isEasterMonday.js';\nimport { isGoodFriday } from './holidays/isGoodFriday.js';\nimport { isMatariki } from './holidays/isMatariki.js';\nimport { isSovereignsBirthday } from './holidays/isSovereignsBirthday.js';\nimport { isMondayAfterWaitangiDay, isWaitangiDay } from './holidays/isWaitangiDay.js';\nimport { isWeekend } from './holidays/isWeekend.js';\nimport { isLabourDay } from './holidays/isLabourDay.js';\n\nexport enum WorkingDayDefinition {\n\t/** Official Information Act 1982 */\n\tOIA = 'OIA',\n}\n\n/**\n * Returns if a date is a working day according to the Official Information Act 1982.\n */\nfunction isWorkingDayOia(date: Date): boolean {\n\t/* [Official Information Act 1982 section 2, definition of **working day**](https://www.legislation.govt.nz/act/public/1982/0156/latest/whole.html#DLM64790)\n\n\t**working day** means any day of the week other than—\n\t\t(a)\n\t\ta Saturday, a Sunday, Waitangi Day, Good Friday, Easter Monday, Anzac Day, the Sovereign’s birthday, Te Rā Aro ki a Matariki/Matariki Observance Day, and Labour Day; and\n\t\t(ab)\n\t\tif Waitangi Day or Anzac Day falls on a Saturday or a Sunday, the following Monday; and\n\t\t(b)\n\t\ta day in the period commencing with 25 December in any year and ending with 15 January in the following year.\n\t*/\n\n\t// (a)\n\tif (\n\t\tisWeekend(date) ||\n\t\tisWaitangiDay(date) ||\n\t\tisGoodFriday(date) ||\n\t\tisEasterMonday(date) ||\n\t\tisAnzacDay(date) ||\n\t\tisSovereignsBirthday(date) ||\n\t\tisMatariki(date) ||\n\t\tisLabourDay(date)\n\t) {\n\t\treturn false;\n\t}\n\n\t// (ab)\n\tif (\n\t\tisMondayAfterAnzacDay(date) ||\n\t\tisMondayAfterWaitangiDay(date)\n\t) {\n\t\treturn false;\n\t}\n\n\t// (b)\n\tif (\n\t\t(\n\t\t\tdate.getMonth() === Month.DECEMBER &&\n\t\t\tdate.getDate() >= 25\n\t\t) ||\n\t\t(\n\t\t\tdate.getMonth() === Month.JANUARY &&\n\t\t\tdate.getDate() <= 15\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Returns if a date is a working day under a given legislative definition of *working day*.\n *\n * @param {Date} date - The date to be tested.\n * @param {WorkingDayDefinition} definition - The definition of *working day* to be used.\n */\nexport function isWorkingDay(date: Date, definition: WorkingDayDefinition = WorkingDayDefinition.OIA): boolean {\n\tif (definition === WorkingDayDefinition.OIA) {\n\t\treturn isWorkingDayOia(date);\n\t} else {\n\t\tthrow new TypeError(`Unrecognised working day definition ${JSON.stringify(definition)}`);\n\t}\n}\n","import { isWorkingDay } from '@cipscis/working-days';\n\nconst Selectors = Object.freeze({\n\tDATE: '#example-date',\n\tDATE_OUTPUT: '#example-date-output',\n});\n\nconst $date = document.querySelector(Selectors.DATE);\n\nif ($date && $date instanceof HTMLInputElement) {\n\t$date.addEventListener('change', (e) => {\n\t\tconst $output = document.querySelector(Selectors.DATE_OUTPUT);\n\n\t\tif ($output) {\n\t\t\tconst value = $date.value;\n\t\t\tif (/^\\d{4}-\\d{2}-\\d{2}$/.test(value)) {\n\t\t\t\tconst date = new Date(value);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst dateIsWorkingDay = isWorkingDay(date);\n\n\t\t\t\t\t$output.innerHTML = dateIsWorkingDay ? 'Working day' : 'Not a working day';\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof RangeError) {\n\t\t\t\t\t\t$output.innerHTML = `RangeError: ${e.message}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$output.innerHTML = 'An unexpected error was encountered';\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$output.innerHTML = 'Please select a valid date';\n\t\t\t}\n\t\t}\n\t});\n}\n\n// console.log(foo());\n","import { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * Returns if a given date is a Saturday or a Sunday.\n */\nexport function isWeekend(date: Date): boolean {\n\tconst dayOfWeek = date.getDay();\n\n\tif (\n\t\tdayOfWeek === DayOfWeek.SATURDAY ||\n\t\tdayOfWeek === DayOfWeek.SUNDAY\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * Returns if a given date is Waitangi Day.\n *\n * Definition taken from [Waitangi Day Act 1976 section 3](https://www.legislation.govt.nz/act/public/1976/0033/latest/whole.html#DLM439055)\n */\nexport function isWaitangiDay(date: Date): boolean {\n\tconst month = date.getMonth();\n\tif (month === Month.FEBRUARY) {\n\t\tconst dayOfMonth = date.getDate();\n\n\t\tif (dayOfMonth === 6) {\n\t\t\t// [Waitangi Day Act 1976 section 3](https://www.legislation.govt.nz/act/public/1976/0033/latest/whole.html#DLM439055)\n\t\t\t// > 6 February in each year shall be known as Waitangi Day.\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns if a given date is the Monday following Waitangi Day, if Waitangi Day for that year falls on a Saturday or a Sunday.\n */\nexport function isMondayAfterWaitangiDay(date: Date): boolean {\n\tconst month = date.getMonth();\n\tif (month === Month.FEBRUARY) {\n\t\tconst dayOfMonth = date.getDate();\n\t\tconst dayOfWeek = date.getDay();\n\n\t\tif (\n\t\t\t(dayOfWeek === DayOfWeek.MONDAY) &&\n\t\t\t(dayOfMonth === 7 || dayOfMonth === 8)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { DayOfWeek } from '../util/DayOfWeek.js';\n\nimport { isEasterSunday } from './isEasterSunday.js';\n\n/**\n * Returns if a given date is Good Friday.\n *\n * As far as I can find, there is no definition of when Good Friday occurs in New Zealand law.\n *\n * If it isn't defined, common law fills the gap, and it would likely be interpreted based on \"ordinary usage\".\n *\n * Good Friday is the Friday before Easter Sunday.\n */\nexport function isGoodFriday(date: Date): boolean {\n\tconst dayOfWeek = date.getDay();\n\tif (dayOfWeek === DayOfWeek.FRIDAY) {\n\t\tconst nextSunday = new Date(\n\t\t\tdate.getFullYear(),\n\t\t\tdate.getMonth(),\n\t\t\tdate.getDate() + 2,\n\t\t);\n\n\t\tif (isEasterSunday(nextSunday)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { DayOfWeek } from '../util/DayOfWeek.js';\n\nimport { isEasterSunday } from './isEasterSunday.js';\n\n/**\n * Returns if a given date is Easter Monday.\n *\n * As far as I can find, there is no definition of when Easter Monday occurs in New Zealand law.\n *\n * If it isn't defined, common law fills the gap, and it would likely be interpreted based on \"ordinary usage\".\n *\n * Easter Monday is the Monday after Easter Sunday.\n */\nexport function isEasterMonday(date: Date): boolean {\n\tconst dayOfWeek = date.getDay();\n\tif (dayOfWeek === DayOfWeek.MONDAY) {\n\t\tconst lastSunday = new Date(\n\t\t\tdate.getFullYear(),\n\t\t\tdate.getMonth(),\n\t\t\tdate.getDate() - 1\n\t\t);\n\n\t\tif (isEasterSunday(lastSunday)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * Returns if a given date is Anzac Day.\n *\n * Definition taken from [Anzac Day Act 1966 section 2](https://www.legislation.govt.nz/act/public/1966/0044/latest/whole.html#DLM379811)\n */\nexport function isAnzacDay(date: Date): boolean {\n\tconst month = date.getMonth();\n\tif (month === Month.APRIL) {\n\t\tconst dayOfMonth = date.getDate();\n\n\t\tif (dayOfMonth === 25) {\n\t\t\t// [Anzac Day Act 1966 section 2](https://www.legislation.govt.nz/act/public/1966/0044/latest/whole.html#DLM379811)\n\t\t\t// > 25 April in each year... shall be known as Anzac Day.\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns if a date is the Monday following Anzac Day, if Anzac Day for that year falls on a Saturday or a Sunday.\n */\nexport function isMondayAfterAnzacDay(date: Date): boolean {\n\tconst month = date.getMonth();\n\tif (month === Month.APRIL) {\n\t\tconst dayOfMonth = date.getDate();\n\t\tconst dayOfWeek = date.getDay();\n\n\t\tif (\n\t\t\t(dayOfWeek === DayOfWeek.MONDAY) &&\n\t\t\t(dayOfMonth === 26 || dayOfMonth === 27)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * Returns if a given date is the sovereign's birthday.\n *\n * Definition taken from [Sovereign's Birthday Observance Act 1952 section 2](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n *\n * **Warning**: This function will no longer return a correct result once Queen Elizabeth the Second is no longer the Queen of New Zealand.\n *\n * @throws {RangeError} This function only defines the Sovereign's Birthday for 1952 and for years after 1953. A `RangeError` will be thrown if dates on non-supported years are used.\n */\nexport function isSovereignsBirthday(date: Date): boolean {\n\tconst year = date.getFullYear();\n\tconst month = date.getMonth();\n\n\tif (year < 1952) {\n\t\tthrow new RangeError(`The Sovereign's Birthday prior to the year 1952 is not defined.`);\n\t}\n\n\tif (year === 1952) {\n\t\t// [Sovereign's Birthday Observance Act 1952 section 2(a)](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n\t\t// > in respect of the year 1952, [the Sovereign's birthday shall] be deemed to be... 2 June\n\t\tif (\n\t\t\tmonth === Month.JUNE &&\n\t\t\tdate.getDate() === 2\n\t\t) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (year === 1953) {\n\t\t// [Sovereign's Birthday Observance Act 1952 section 2(b)](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n\t\t// > in respect of the year 1953, [the Sovereign's birthday shall] be deemed to be... a day to be appointed in that behalf by the Governor-General by Proclamation\n\n\t\t// I haven't been able to find this proclamation, nor any information about when the Sovereign's Birthday was observed in 1953.\n\n\t\tthrow new RangeError(`The date of the Sovereign's Birthday in 1953 is unknown.`);\n\t}\n\n\tif (month === Month.JUNE) {\n\t\tconst dayOfMonth = date.getDate();\n\t\tconst dayOfWeek = date.getDay();\n\n\t\t// [Sovereign's Birthday Observance Act 1952 section 2(c)](https://www.legislation.govt.nz/act/public/1952/0013/latest/whole.html#DLM265809)\n\t\t// > in respect of every year of the reign of Her Majesty Queen Elizabeth the Second after the year 1953, [the Sovereign's birthday shall] be deemed to be... the first Monday in June.\n\t\tif (\n\t\t\tdayOfWeek === DayOfWeek.MONDAY &&\n\t\t\tdayOfMonth <= 7\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { Month } from '../util/Month.js';\nimport { DayOfWeek } from '../util/DayOfWeek.js';\n\n/**\n * Returns if a given date is Labour Day.\n *\n * Definition taken from [Holidays Act 2003 section 44(1)(j)](https://www.legislation.govt.nz/act/public/2003/0129/latest/whole.html#DLM237120)\n */\nexport function isLabourDay(date: Date): boolean {\n\tconst month = date.getMonth();\n\tif (month === Month.OCTOBER) {\n\t\tconst dayOfMonth = date.getDate();\n\t\tconst dayOfWeek = date.getDay();\n\n\t\tif (\n\t\t\tdayOfWeek === DayOfWeek.MONDAY &&\n\t\t\tdayOfMonth >= 22 &&\n\t\t\tdayOfMonth < 29\n\t\t) {\n\t\t\t// [Holidays Act 2003 section 44(1)(j)](https://www.legislation.govt.nz/act/public/2003/0129/latest/whole.html#DLM237120)\n\t\t\t// > Labour Day (being the fourth Monday in October)\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n"],"names":["Month","DayOfWeek","PaschalFullMoonDates","APRIL","MARCH","isEasterSunday","date","month","getMonth","year","getFullYear","dayOfMonth","getDate","pfm","pfmDate","Date","pfmDayOfWeek","getDay","daysUntilNextSunday","SUNDAY","easterDate","setDate","MatarikiSchedule","JUNE","JULY","WorkingDayDefinition","Selectors","Object","freeze","DATE","DATE_OUTPUT","$date","document","querySelector","HTMLInputElement","addEventListener","e","$output","value","test","dateIsWorkingDay","definition","OIA","dayOfWeek","SATURDAY","isWeekend","FEBRUARY","isWaitangiDay","FRIDAY","isGoodFriday","MONDAY","isEasterMonday","isAnzacDay","RangeError","isSovereignsBirthday","matarikiMonth","matarikiDate","isMatariki","OCTOBER","isLabourDay","isMondayAfterAnzacDay","isMondayAfterWaitangiDay","DECEMBER","JANUARY","isWorkingDayOia","TypeError","JSON","stringify","isWorkingDay","innerHTML","message"],"sourceRoot":""}